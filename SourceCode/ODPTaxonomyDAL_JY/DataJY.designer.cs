#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ODPTaxonomyDAL_JY
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ODP_Taxonomy_Dev")]
	public partial class DataJYDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAbstractStatusChangeHistory(AbstractStatusChangeHistory instance);
    partial void UpdateAbstractStatusChangeHistory(AbstractStatusChangeHistory instance);
    partial void DeleteAbstractStatusChangeHistory(AbstractStatusChangeHistory instance);
    partial void InsertAbstractStatus(AbstractStatus instance);
    partial void UpdateAbstractStatus(AbstractStatus instance);
    partial void DeleteAbstractStatus(AbstractStatus instance);
    partial void InsertSubmission(Submission instance);
    partial void UpdateSubmission(Submission instance);
    partial void DeleteSubmission(Submission instance);
    partial void InsertEvaluation(Evaluation instance);
    partial void UpdateEvaluation(Evaluation instance);
    partial void DeleteEvaluation(Evaluation instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertAbstractScan(AbstractScan instance);
    partial void UpdateAbstractScan(AbstractScan instance);
    partial void DeleteAbstractScan(AbstractScan instance);
    partial void InsertAbstractReviewList(AbstractReviewList instance);
    partial void UpdateAbstractReviewList(AbstractReviewList instance);
    partial void DeleteAbstractReviewList(AbstractReviewList instance);
    partial void InsertKappaData(KappaData instance);
    partial void UpdateKappaData(KappaData instance);
    partial void DeleteKappaData(KappaData instance);
    partial void InsertKappaUserIdentify(KappaUserIdentify instance);
    partial void UpdateKappaUserIdentify(KappaUserIdentify instance);
    partial void DeleteKappaUserIdentify(KappaUserIdentify instance);
    partial void InsertE_StudyDesignPurposeAnswer(E_StudyDesignPurposeAnswer instance);
    partial void UpdateE_StudyDesignPurposeAnswer(E_StudyDesignPurposeAnswer instance);
    partial void DeleteE_StudyDesignPurposeAnswer(E_StudyDesignPurposeAnswer instance);
    partial void InsertF_PreventionCategoryAnswer(F_PreventionCategoryAnswer instance);
    partial void UpdateF_PreventionCategoryAnswer(F_PreventionCategoryAnswer instance);
    partial void DeleteF_PreventionCategoryAnswer(F_PreventionCategoryAnswer instance);
    partial void InsertAbstract(Abstract instance);
    partial void UpdateAbstract(Abstract instance);
    partial void DeleteAbstract(Abstract instance);
    partial void InsertReport_AbstractExcludedList(Report_AbstractExcludedList instance);
    partial void UpdateReport_AbstractExcludedList(Report_AbstractExcludedList instance);
    partial void DeleteReport_AbstractExcludedList(Report_AbstractExcludedList instance);
    #endregion
		
		public DataJYDataContext() : 
				base(global::ODPTaxonomyDAL_JY.Properties.Settings.Default.ODP_Taxonomy_DevConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public DataJYDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataJYDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataJYDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataJYDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AbstractStatusChangeHistory> AbstractStatusChangeHistories
		{
			get
			{
				return this.GetTable<AbstractStatusChangeHistory>();
			}
		}
		
		public System.Data.Linq.Table<AbstractStatus> AbstractStatus
		{
			get
			{
				return this.GetTable<AbstractStatus>();
			}
		}
		
		public System.Data.Linq.Table<Submission> Submissions
		{
			get
			{
				return this.GetTable<Submission>();
			}
		}
		
		public System.Data.Linq.Table<Evaluation> Evaluations
		{
			get
			{
				return this.GetTable<Evaluation>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<AbstractScan> AbstractScans
		{
			get
			{
				return this.GetTable<AbstractScan>();
			}
		}
		
		public System.Data.Linq.Table<AbstractReviewList> AbstractReviewLists
		{
			get
			{
				return this.GetTable<AbstractReviewList>();
			}
		}
		
		public System.Data.Linq.Table<KappaData> KappaDatas
		{
			get
			{
				return this.GetTable<KappaData>();
			}
		}
		
		public System.Data.Linq.Table<KappaUserIdentify> KappaUserIdentifies
		{
			get
			{
				return this.GetTable<KappaUserIdentify>();
			}
		}
		
		public System.Data.Linq.Table<E_StudyDesignPurposeAnswer> E_StudyDesignPurposeAnswers
		{
			get
			{
				return this.GetTable<E_StudyDesignPurposeAnswer>();
			}
		}
		
		public System.Data.Linq.Table<F_PreventionCategoryAnswer> F_PreventionCategoryAnswers
		{
			get
			{
				return this.GetTable<F_PreventionCategoryAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Abstract> Abstracts
		{
			get
			{
				return this.GetTable<Abstract>();
			}
		}
		
		public System.Data.Linq.Table<Report_AbstractExcludedList> Report_AbstractExcludedLists
		{
			get
			{
				return this.GetTable<Report_AbstractExcludedList>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AbstractStatusChangeHistory")]
	public partial class AbstractStatusChangeHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractStatusChangeHistoryID;
		
		private int _AbstractID;
		
		private System.Nullable<int> _EvaluationId;
		
		private int _AbstractStatusID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.Guid> _CreatedBy;
		
		private EntityRef<AbstractStatus> _AbstractStatus;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<Evaluation> _Evaluation1;
		
		private EntityRef<Abstract> _Abstract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractStatusChangeHistoryIDChanging(int value);
    partial void OnAbstractStatusChangeHistoryIDChanged();
    partial void OnAbstractIDChanging(int value);
    partial void OnAbstractIDChanged();
    partial void OnEvaluationIdChanging(System.Nullable<int> value);
    partial void OnEvaluationIdChanged();
    partial void OnAbstractStatusIDChanging(int value);
    partial void OnAbstractStatusIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByChanged();
    #endregion
		
		public AbstractStatusChangeHistory()
		{
			this._AbstractStatus = default(EntityRef<AbstractStatus>);
			this._Evaluation = default(EntityRef<Evaluation>);
			this._Evaluation1 = default(EntityRef<Evaluation>);
			this._Abstract = default(EntityRef<Abstract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusChangeHistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbstractStatusChangeHistoryID
		{
			get
			{
				return this._AbstractStatusChangeHistoryID;
			}
			set
			{
				if ((this._AbstractStatusChangeHistoryID != value))
				{
					this.OnAbstractStatusChangeHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusChangeHistoryID = value;
					this.SendPropertyChanged("AbstractStatusChangeHistoryID");
					this.OnAbstractStatusChangeHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractID", DbType="Int NOT NULL")]
		public int AbstractID
		{
			get
			{
				return this._AbstractID;
			}
			set
			{
				if ((this._AbstractID != value))
				{
					if (this._Abstract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbstractIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractID = value;
					this.SendPropertyChanged("AbstractID");
					this.OnAbstractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationId", DbType="Int")]
		public System.Nullable<int> EvaluationId
		{
			get
			{
				return this._EvaluationId;
			}
			set
			{
				if ((this._EvaluationId != value))
				{
					if ((this._Evaluation.HasLoadedOrAssignedValue || this._Evaluation1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluationIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluationId = value;
					this.SendPropertyChanged("EvaluationId");
					this.OnEvaluationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusID", DbType="Int NOT NULL")]
		public int AbstractStatusID
		{
			get
			{
				return this._AbstractStatusID;
			}
			set
			{
				if ((this._AbstractStatusID != value))
				{
					if (this._AbstractStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbstractStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusID = value;
					this.SendPropertyChanged("AbstractStatusID");
					this.OnAbstractStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AbstractStatus_AbstractStatusChangeHistory", Storage="_AbstractStatus", ThisKey="AbstractStatusID", OtherKey="AbstractStatusID", IsForeignKey=true)]
		public AbstractStatus AbstractStatus
		{
			get
			{
				return this._AbstractStatus.Entity;
			}
			set
			{
				AbstractStatus previousValue = this._AbstractStatus.Entity;
				if (((previousValue != value) 
							|| (this._AbstractStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AbstractStatus.Entity = null;
						previousValue.AbstractStatusChangeHistories.Remove(this);
					}
					this._AbstractStatus.Entity = value;
					if ((value != null))
					{
						value.AbstractStatusChangeHistories.Add(this);
						this._AbstractStatusID = value.AbstractStatusID;
					}
					else
					{
						this._AbstractStatusID = default(int);
					}
					this.SendPropertyChanged("AbstractStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_AbstractStatusChangeHistory", Storage="_Evaluation", ThisKey="EvaluationId", OtherKey="EvaluationId", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.AbstractStatusChangeHistories.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.AbstractStatusChangeHistories.Add(this);
						this._EvaluationId = value.EvaluationId;
					}
					else
					{
						this._EvaluationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_AbstractStatusChangeHistory1", Storage="_Evaluation1", ThisKey="EvaluationId", OtherKey="EvaluationId", IsForeignKey=true)]
		public Evaluation Evaluation1
		{
			get
			{
				return this._Evaluation1.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation1.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation1.Entity = null;
						previousValue.AbstractStatusChangeHistories1.Remove(this);
					}
					this._Evaluation1.Entity = value;
					if ((value != null))
					{
						value.AbstractStatusChangeHistories1.Add(this);
						this._EvaluationId = value.EvaluationId;
					}
					else
					{
						this._EvaluationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Evaluation1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_AbstractStatusChangeHistory", Storage="_Abstract", ThisKey="AbstractID", OtherKey="AbstractID", IsForeignKey=true)]
		public Abstract Abstract
		{
			get
			{
				return this._Abstract.Entity;
			}
			set
			{
				Abstract previousValue = this._Abstract.Entity;
				if (((previousValue != value) 
							|| (this._Abstract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abstract.Entity = null;
						previousValue.AbstractStatusChangeHistories.Remove(this);
					}
					this._Abstract.Entity = value;
					if ((value != null))
					{
						value.AbstractStatusChangeHistories.Add(this);
						this._AbstractID = value.AbstractID;
					}
					else
					{
						this._AbstractID = default(int);
					}
					this.SendPropertyChanged("Abstract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AbstractStatus")]
	public partial class AbstractStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractStatusID;
		
		private string _AbstractStatusCode;
		
		private string _AbstractStatusDescription;
		
		private System.Nullable<int> _StatusID;
		
		private EntitySet<AbstractStatusChangeHistory> _AbstractStatusChangeHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractStatusIDChanging(int value);
    partial void OnAbstractStatusIDChanged();
    partial void OnAbstractStatusCodeChanging(string value);
    partial void OnAbstractStatusCodeChanged();
    partial void OnAbstractStatusDescriptionChanging(string value);
    partial void OnAbstractStatusDescriptionChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
		
		public AbstractStatus()
		{
			this._AbstractStatusChangeHistories = new EntitySet<AbstractStatusChangeHistory>(new Action<AbstractStatusChangeHistory>(this.attach_AbstractStatusChangeHistories), new Action<AbstractStatusChangeHistory>(this.detach_AbstractStatusChangeHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbstractStatusID
		{
			get
			{
				return this._AbstractStatusID;
			}
			set
			{
				if ((this._AbstractStatusID != value))
				{
					this.OnAbstractStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusID = value;
					this.SendPropertyChanged("AbstractStatusID");
					this.OnAbstractStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string AbstractStatusCode
		{
			get
			{
				return this._AbstractStatusCode;
			}
			set
			{
				if ((this._AbstractStatusCode != value))
				{
					this.OnAbstractStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusCode = value;
					this.SendPropertyChanged("AbstractStatusCode");
					this.OnAbstractStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusDescription", DbType="NVarChar(255)")]
		public string AbstractStatusDescription
		{
			get
			{
				return this._AbstractStatusDescription;
			}
			set
			{
				if ((this._AbstractStatusDescription != value))
				{
					this.OnAbstractStatusDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusDescription = value;
					this.SendPropertyChanged("AbstractStatusDescription");
					this.OnAbstractStatusDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AbstractStatus_AbstractStatusChangeHistory", Storage="_AbstractStatusChangeHistories", ThisKey="AbstractStatusID", OtherKey="AbstractStatusID")]
		public EntitySet<AbstractStatusChangeHistory> AbstractStatusChangeHistories
		{
			get
			{
				return this._AbstractStatusChangeHistories;
			}
			set
			{
				this._AbstractStatusChangeHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.AbstractStatus = this;
		}
		
		private void detach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.AbstractStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Submission")]
	public partial class Submission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubmissionID;
		
		private System.Nullable<int> _EvaluationId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<short> _SubmissionTypeId;
		
		private string _comments;
		
		private bool _UnableToCode;
		
		private System.Nullable<System.DateTime> _SubmissionDateTime;
		
		private System.Nullable<int> _StatusID;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<E_StudyDesignPurposeAnswer> _E_StudyDesignPurposeAnswers;
		
		private EntitySet<F_PreventionCategoryAnswer> _F_PreventionCategoryAnswers;
		
		private EntityRef<Evaluation> _Evaluation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubmissionIDChanging(int value);
    partial void OnSubmissionIDChanged();
    partial void OnEvaluationIdChanging(System.Nullable<int> value);
    partial void OnEvaluationIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnSubmissionTypeIdChanging(System.Nullable<short> value);
    partial void OnSubmissionTypeIdChanged();
    partial void OncommentsChanging(string value);
    partial void OncommentsChanged();
    partial void OnUnableToCodeChanging(bool value);
    partial void OnUnableToCodeChanged();
    partial void OnSubmissionDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmissionDateTimeChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Submission()
		{
			this._E_StudyDesignPurposeAnswers = new EntitySet<E_StudyDesignPurposeAnswer>(new Action<E_StudyDesignPurposeAnswer>(this.attach_E_StudyDesignPurposeAnswers), new Action<E_StudyDesignPurposeAnswer>(this.detach_E_StudyDesignPurposeAnswers));
			this._F_PreventionCategoryAnswers = new EntitySet<F_PreventionCategoryAnswer>(new Action<F_PreventionCategoryAnswer>(this.attach_F_PreventionCategoryAnswers), new Action<F_PreventionCategoryAnswer>(this.detach_F_PreventionCategoryAnswers));
			this._Evaluation = default(EntityRef<Evaluation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubmissionID
		{
			get
			{
				return this._SubmissionID;
			}
			set
			{
				if ((this._SubmissionID != value))
				{
					this.OnSubmissionIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionID = value;
					this.SendPropertyChanged("SubmissionID");
					this.OnSubmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationId", DbType="Int")]
		public System.Nullable<int> EvaluationId
		{
			get
			{
				return this._EvaluationId;
			}
			set
			{
				if ((this._EvaluationId != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluationIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluationId = value;
					this.SendPropertyChanged("EvaluationId");
					this.OnEvaluationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionTypeId", DbType="SmallInt")]
		public System.Nullable<short> SubmissionTypeId
		{
			get
			{
				return this._SubmissionTypeId;
			}
			set
			{
				if ((this._SubmissionTypeId != value))
				{
					this.OnSubmissionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SubmissionTypeId = value;
					this.SendPropertyChanged("SubmissionTypeId");
					this.OnSubmissionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comments", DbType="NVarChar(MAX)")]
		public string comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				if ((this._comments != value))
				{
					this.OncommentsChanging(value);
					this.SendPropertyChanging();
					this._comments = value;
					this.SendPropertyChanged("comments");
					this.OncommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnableToCode", DbType="Bit NOT NULL")]
		public bool UnableToCode
		{
			get
			{
				return this._UnableToCode;
			}
			set
			{
				if ((this._UnableToCode != value))
				{
					this.OnUnableToCodeChanging(value);
					this.SendPropertyChanging();
					this._UnableToCode = value;
					this.SendPropertyChanged("UnableToCode");
					this.OnUnableToCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SubmissionDateTime
		{
			get
			{
				return this._SubmissionDateTime;
			}
			set
			{
				if ((this._SubmissionDateTime != value))
				{
					this.OnSubmissionDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SubmissionDateTime = value;
					this.SendPropertyChanged("SubmissionDateTime");
					this.OnSubmissionDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_E_StudyDesignPurposeAnswer", Storage="_E_StudyDesignPurposeAnswers", ThisKey="SubmissionID", OtherKey="SubmissionID")]
		public EntitySet<E_StudyDesignPurposeAnswer> E_StudyDesignPurposeAnswers
		{
			get
			{
				return this._E_StudyDesignPurposeAnswers;
			}
			set
			{
				this._E_StudyDesignPurposeAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_F_PreventionCategoryAnswer", Storage="_F_PreventionCategoryAnswers", ThisKey="SubmissionID", OtherKey="SubmissionID")]
		public EntitySet<F_PreventionCategoryAnswer> F_PreventionCategoryAnswers
		{
			get
			{
				return this._F_PreventionCategoryAnswers;
			}
			set
			{
				this._F_PreventionCategoryAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_Submission", Storage="_Evaluation", ThisKey="EvaluationId", OtherKey="EvaluationId", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.Submissions.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.Submissions.Add(this);
						this._EvaluationId = value.EvaluationId;
					}
					else
					{
						this._EvaluationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_E_StudyDesignPurposeAnswers(E_StudyDesignPurposeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = this;
		}
		
		private void detach_E_StudyDesignPurposeAnswers(E_StudyDesignPurposeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = null;
		}
		
		private void attach_F_PreventionCategoryAnswers(F_PreventionCategoryAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = this;
		}
		
		private void detach_F_PreventionCategoryAnswers(F_PreventionCategoryAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evaluation")]
	public partial class Evaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvaluationId;
		
		private System.Nullable<System.Guid> _ConsensusStartedBy;
		
		private System.Nullable<int> _TeamID;
		
		private System.Nullable<int> _AbstractID;
		
		private bool _IsComplete;
		
		private System.Nullable<System.DateTime> _DateTimeStarted;
		
		private System.Nullable<System.DateTime> _DateTimeEnded;
		
		private System.Nullable<short> _EvaluationTypeId;
		
		private bool _IsStopped;
		
		private System.Nullable<System.Guid> _StoppedBy;
		
		private System.Nullable<System.DateTime> _StoppedDateTime;
		
		private EntitySet<AbstractStatusChangeHistory> _AbstractStatusChangeHistories;
		
		private EntitySet<AbstractStatusChangeHistory> _AbstractStatusChangeHistories1;
		
		private EntitySet<Submission> _Submissions;
		
		private EntitySet<AbstractScan> _AbstractScans;
		
		private EntityRef<Abstract> _Abstract;
		
		private EntityRef<Abstract> _Abstract1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvaluationIdChanging(int value);
    partial void OnEvaluationIdChanged();
    partial void OnConsensusStartedByChanging(System.Nullable<System.Guid> value);
    partial void OnConsensusStartedByChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    partial void OnAbstractIDChanging(System.Nullable<int> value);
    partial void OnAbstractIDChanged();
    partial void OnIsCompleteChanging(bool value);
    partial void OnIsCompleteChanged();
    partial void OnDateTimeStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeStartedChanged();
    partial void OnDateTimeEndedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeEndedChanged();
    partial void OnEvaluationTypeIdChanging(System.Nullable<short> value);
    partial void OnEvaluationTypeIdChanged();
    partial void OnIsStoppedChanging(bool value);
    partial void OnIsStoppedChanged();
    partial void OnStoppedByChanging(System.Nullable<System.Guid> value);
    partial void OnStoppedByChanged();
    partial void OnStoppedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStoppedDateTimeChanged();
    #endregion
		
		public Evaluation()
		{
			this._AbstractStatusChangeHistories = new EntitySet<AbstractStatusChangeHistory>(new Action<AbstractStatusChangeHistory>(this.attach_AbstractStatusChangeHistories), new Action<AbstractStatusChangeHistory>(this.detach_AbstractStatusChangeHistories));
			this._AbstractStatusChangeHistories1 = new EntitySet<AbstractStatusChangeHistory>(new Action<AbstractStatusChangeHistory>(this.attach_AbstractStatusChangeHistories1), new Action<AbstractStatusChangeHistory>(this.detach_AbstractStatusChangeHistories1));
			this._Submissions = new EntitySet<Submission>(new Action<Submission>(this.attach_Submissions), new Action<Submission>(this.detach_Submissions));
			this._AbstractScans = new EntitySet<AbstractScan>(new Action<AbstractScan>(this.attach_AbstractScans), new Action<AbstractScan>(this.detach_AbstractScans));
			this._Abstract = default(EntityRef<Abstract>);
			this._Abstract1 = default(EntityRef<Abstract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EvaluationId
		{
			get
			{
				return this._EvaluationId;
			}
			set
			{
				if ((this._EvaluationId != value))
				{
					this.OnEvaluationIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluationId = value;
					this.SendPropertyChanged("EvaluationId");
					this.OnEvaluationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsensusStartedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ConsensusStartedBy
		{
			get
			{
				return this._ConsensusStartedBy;
			}
			set
			{
				if ((this._ConsensusStartedBy != value))
				{
					this.OnConsensusStartedByChanging(value);
					this.SendPropertyChanging();
					this._ConsensusStartedBy = value;
					this.SendPropertyChanged("ConsensusStartedBy");
					this.OnConsensusStartedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int")]
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractID", DbType="Int")]
		public System.Nullable<int> AbstractID
		{
			get
			{
				return this._AbstractID;
			}
			set
			{
				if ((this._AbstractID != value))
				{
					if ((this._Abstract.HasLoadedOrAssignedValue || this._Abstract1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbstractIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractID = value;
					this.SendPropertyChanged("AbstractID");
					this.OnAbstractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsComplete", DbType="Bit NOT NULL")]
		public bool IsComplete
		{
			get
			{
				return this._IsComplete;
			}
			set
			{
				if ((this._IsComplete != value))
				{
					this.OnIsCompleteChanging(value);
					this.SendPropertyChanging();
					this._IsComplete = value;
					this.SendPropertyChanged("IsComplete");
					this.OnIsCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeStarted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTimeStarted
		{
			get
			{
				return this._DateTimeStarted;
			}
			set
			{
				if ((this._DateTimeStarted != value))
				{
					this.OnDateTimeStartedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeStarted = value;
					this.SendPropertyChanged("DateTimeStarted");
					this.OnDateTimeStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeEnded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTimeEnded
		{
			get
			{
				return this._DateTimeEnded;
			}
			set
			{
				if ((this._DateTimeEnded != value))
				{
					this.OnDateTimeEndedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeEnded = value;
					this.SendPropertyChanged("DateTimeEnded");
					this.OnDateTimeEndedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationTypeId", DbType="SmallInt")]
		public System.Nullable<short> EvaluationTypeId
		{
			get
			{
				return this._EvaluationTypeId;
			}
			set
			{
				if ((this._EvaluationTypeId != value))
				{
					this.OnEvaluationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluationTypeId = value;
					this.SendPropertyChanged("EvaluationTypeId");
					this.OnEvaluationTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsStopped", DbType="Bit NOT NULL")]
		public bool IsStopped
		{
			get
			{
				return this._IsStopped;
			}
			set
			{
				if ((this._IsStopped != value))
				{
					this.OnIsStoppedChanging(value);
					this.SendPropertyChanging();
					this._IsStopped = value;
					this.SendPropertyChanged("IsStopped");
					this.OnIsStoppedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoppedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StoppedBy
		{
			get
			{
				return this._StoppedBy;
			}
			set
			{
				if ((this._StoppedBy != value))
				{
					this.OnStoppedByChanging(value);
					this.SendPropertyChanging();
					this._StoppedBy = value;
					this.SendPropertyChanged("StoppedBy");
					this.OnStoppedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoppedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StoppedDateTime
		{
			get
			{
				return this._StoppedDateTime;
			}
			set
			{
				if ((this._StoppedDateTime != value))
				{
					this.OnStoppedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StoppedDateTime = value;
					this.SendPropertyChanged("StoppedDateTime");
					this.OnStoppedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_AbstractStatusChangeHistory", Storage="_AbstractStatusChangeHistories", ThisKey="EvaluationId", OtherKey="EvaluationId")]
		public EntitySet<AbstractStatusChangeHistory> AbstractStatusChangeHistories
		{
			get
			{
				return this._AbstractStatusChangeHistories;
			}
			set
			{
				this._AbstractStatusChangeHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_AbstractStatusChangeHistory1", Storage="_AbstractStatusChangeHistories1", ThisKey="EvaluationId", OtherKey="EvaluationId")]
		public EntitySet<AbstractStatusChangeHistory> AbstractStatusChangeHistories1
		{
			get
			{
				return this._AbstractStatusChangeHistories1;
			}
			set
			{
				this._AbstractStatusChangeHistories1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_Submission", Storage="_Submissions", ThisKey="EvaluationId", OtherKey="EvaluationId")]
		public EntitySet<Submission> Submissions
		{
			get
			{
				return this._Submissions;
			}
			set
			{
				this._Submissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_AbstractScan", Storage="_AbstractScans", ThisKey="EvaluationId", OtherKey="EvaluationId")]
		public EntitySet<AbstractScan> AbstractScans
		{
			get
			{
				return this._AbstractScans;
			}
			set
			{
				this._AbstractScans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_Evaluation", Storage="_Abstract", ThisKey="AbstractID", OtherKey="AbstractID", IsForeignKey=true)]
		public Abstract Abstract
		{
			get
			{
				return this._Abstract.Entity;
			}
			set
			{
				Abstract previousValue = this._Abstract.Entity;
				if (((previousValue != value) 
							|| (this._Abstract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abstract.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Abstract.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._AbstractID = value.AbstractID;
					}
					else
					{
						this._AbstractID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Abstract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_Evaluation1", Storage="_Abstract1", ThisKey="AbstractID", OtherKey="AbstractID", IsForeignKey=true)]
		public Abstract Abstract1
		{
			get
			{
				return this._Abstract1.Entity;
			}
			set
			{
				Abstract previousValue = this._Abstract1.Entity;
				if (((previousValue != value) 
							|| (this._Abstract1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abstract1.Entity = null;
						previousValue.Evaluations1.Remove(this);
					}
					this._Abstract1.Entity = value;
					if ((value != null))
					{
						value.Evaluations1.Add(this);
						this._AbstractID = value.AbstractID;
					}
					else
					{
						this._AbstractID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Abstract1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_AbstractStatusChangeHistories1(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation1 = this;
		}
		
		private void detach_AbstractStatusChangeHistories1(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation1 = null;
		}
		
		private void attach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_AbstractScans(AbstractScan entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_AbstractScans(AbstractScan entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private string _UserFirstName;
		
		private string _UserLastName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    partial void OnUserFirstNameChanging(string value);
    partial void OnUserFirstNameChanged();
    partial void OnUserLastNameChanging(string value);
    partial void OnUserLastNameChanged();
    #endregion
		
		public aspnet_User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFirstName", DbType="NVarChar(50)")]
		public string UserFirstName
		{
			get
			{
				return this._UserFirstName;
			}
			set
			{
				if ((this._UserFirstName != value))
				{
					this.OnUserFirstNameChanging(value);
					this.SendPropertyChanging();
					this._UserFirstName = value;
					this.SendPropertyChanged("UserFirstName");
					this.OnUserFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLastName", DbType="NVarChar(50)")]
		public string UserLastName
		{
			get
			{
				return this._UserLastName;
			}
			set
			{
				if ((this._UserLastName != value))
				{
					this.OnUserLastNameChanging(value);
					this.SendPropertyChanging();
					this._UserLastName = value;
					this.SendPropertyChanged("UserLastName");
					this.OnUserLastNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AbstractScan")]
	public partial class AbstractScan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractScanID;
		
		private int _EvaluationId;
		
		private string _FileName;
		
		private System.Nullable<System.Guid> _UploadedBy;
		
		private System.Nullable<System.DateTime> _UploadedDateTime;
		
		private EntityRef<Evaluation> _Evaluation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractScanIDChanging(int value);
    partial void OnAbstractScanIDChanged();
    partial void OnEvaluationIdChanging(int value);
    partial void OnEvaluationIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnUploadedByChanging(System.Nullable<System.Guid> value);
    partial void OnUploadedByChanged();
    partial void OnUploadedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadedDateTimeChanged();
    #endregion
		
		public AbstractScan()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractScanID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbstractScanID
		{
			get
			{
				return this._AbstractScanID;
			}
			set
			{
				if ((this._AbstractScanID != value))
				{
					this.OnAbstractScanIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractScanID = value;
					this.SendPropertyChanged("AbstractScanID");
					this.OnAbstractScanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationId", DbType="Int NOT NULL")]
		public int EvaluationId
		{
			get
			{
				return this._EvaluationId;
			}
			set
			{
				if ((this._EvaluationId != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluationIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluationId = value;
					this.SendPropertyChanged("EvaluationId");
					this.OnEvaluationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UploadedBy
		{
			get
			{
				return this._UploadedBy;
			}
			set
			{
				if ((this._UploadedBy != value))
				{
					this.OnUploadedByChanging(value);
					this.SendPropertyChanging();
					this._UploadedBy = value;
					this.SendPropertyChanged("UploadedBy");
					this.OnUploadedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> UploadedDateTime
		{
			get
			{
				return this._UploadedDateTime;
			}
			set
			{
				if ((this._UploadedDateTime != value))
				{
					this.OnUploadedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadedDateTime = value;
					this.SendPropertyChanged("UploadedDateTime");
					this.OnUploadedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_AbstractScan", Storage="_Evaluation", ThisKey="EvaluationId", OtherKey="EvaluationId", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.AbstractScans.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.AbstractScans.Add(this);
						this._EvaluationId = value.EvaluationId;
					}
					else
					{
						this._EvaluationId = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AbstractReviewList")]
	public partial class AbstractReviewList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractReviewListID;
		
		private int _AbstractID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.Guid> _CreatedBy;
		
		private EntityRef<Abstract> _Abstract;
		
		private EntityRef<Abstract> _Abstract1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractReviewListIDChanging(int value);
    partial void OnAbstractReviewListIDChanged();
    partial void OnAbstractIDChanging(int value);
    partial void OnAbstractIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByChanged();
    #endregion
		
		public AbstractReviewList()
		{
			this._Abstract = default(EntityRef<Abstract>);
			this._Abstract1 = default(EntityRef<Abstract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractReviewListID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbstractReviewListID
		{
			get
			{
				return this._AbstractReviewListID;
			}
			set
			{
				if ((this._AbstractReviewListID != value))
				{
					this.OnAbstractReviewListIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractReviewListID = value;
					this.SendPropertyChanged("AbstractReviewListID");
					this.OnAbstractReviewListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractID", DbType="Int NOT NULL")]
		public int AbstractID
		{
			get
			{
				return this._AbstractID;
			}
			set
			{
				if ((this._AbstractID != value))
				{
					if ((this._Abstract.HasLoadedOrAssignedValue || this._Abstract1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbstractIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractID = value;
					this.SendPropertyChanged("AbstractID");
					this.OnAbstractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_AbstractReviewList", Storage="_Abstract", ThisKey="AbstractID", OtherKey="AbstractID", IsForeignKey=true)]
		public Abstract Abstract
		{
			get
			{
				return this._Abstract.Entity;
			}
			set
			{
				Abstract previousValue = this._Abstract.Entity;
				if (((previousValue != value) 
							|| (this._Abstract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abstract.Entity = null;
						previousValue.AbstractReviewLists.Remove(this);
					}
					this._Abstract.Entity = value;
					if ((value != null))
					{
						value.AbstractReviewLists.Add(this);
						this._AbstractID = value.AbstractID;
					}
					else
					{
						this._AbstractID = default(int);
					}
					this.SendPropertyChanged("Abstract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_AbstractReviewList1", Storage="_Abstract1", ThisKey="AbstractID", OtherKey="AbstractID", IsForeignKey=true)]
		public Abstract Abstract1
		{
			get
			{
				return this._Abstract1.Entity;
			}
			set
			{
				Abstract previousValue = this._Abstract1.Entity;
				if (((previousValue != value) 
							|| (this._Abstract1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abstract1.Entity = null;
						previousValue.AbstractReviewLists1.Remove(this);
					}
					this._Abstract1.Entity = value;
					if ((value != null))
					{
						value.AbstractReviewLists1.Add(this);
						this._AbstractID = value.AbstractID;
					}
					else
					{
						this._AbstractID = default(int);
					}
					this.SendPropertyChanged("Abstract1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KappaData")]
	public partial class KappaData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KappaDataID;
		
		private System.Nullable<int> _AbstractID;
		
		private System.Nullable<int> _KappaTypeID;
		
		private System.Nullable<decimal> _A1;
		
		private System.Nullable<decimal> _A2;
		
		private System.Nullable<decimal> _A3;
		
		private System.Nullable<decimal> _B;
		
		private System.Nullable<decimal> _C;
		
		private System.Nullable<decimal> _D;
		
		private System.Nullable<decimal> _E;
		
		private System.Nullable<decimal> _F;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKappaDataIDChanging(int value);
    partial void OnKappaDataIDChanged();
    partial void OnAbstractIDChanging(System.Nullable<int> value);
    partial void OnAbstractIDChanged();
    partial void OnKappaTypeIDChanging(System.Nullable<int> value);
    partial void OnKappaTypeIDChanged();
    partial void OnA1Changing(System.Nullable<decimal> value);
    partial void OnA1Changed();
    partial void OnA2Changing(System.Nullable<decimal> value);
    partial void OnA2Changed();
    partial void OnA3Changing(System.Nullable<decimal> value);
    partial void OnA3Changed();
    partial void OnBChanging(System.Nullable<decimal> value);
    partial void OnBChanged();
    partial void OnCChanging(System.Nullable<decimal> value);
    partial void OnCChanged();
    partial void OnDChanging(System.Nullable<decimal> value);
    partial void OnDChanged();
    partial void OnEChanging(System.Nullable<decimal> value);
    partial void OnEChanged();
    partial void OnFChanging(System.Nullable<decimal> value);
    partial void OnFChanged();
    #endregion
		
		public KappaData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KappaDataID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KappaDataID
		{
			get
			{
				return this._KappaDataID;
			}
			set
			{
				if ((this._KappaDataID != value))
				{
					this.OnKappaDataIDChanging(value);
					this.SendPropertyChanging();
					this._KappaDataID = value;
					this.SendPropertyChanged("KappaDataID");
					this.OnKappaDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractID", DbType="Int")]
		public System.Nullable<int> AbstractID
		{
			get
			{
				return this._AbstractID;
			}
			set
			{
				if ((this._AbstractID != value))
				{
					this.OnAbstractIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractID = value;
					this.SendPropertyChanged("AbstractID");
					this.OnAbstractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KappaTypeID", DbType="Int")]
		public System.Nullable<int> KappaTypeID
		{
			get
			{
				return this._KappaTypeID;
			}
			set
			{
				if ((this._KappaTypeID != value))
				{
					this.OnKappaTypeIDChanging(value);
					this.SendPropertyChanging();
					this._KappaTypeID = value;
					this.SendPropertyChanged("KappaTypeID");
					this.OnKappaTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A1", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> A1
		{
			get
			{
				return this._A1;
			}
			set
			{
				if ((this._A1 != value))
				{
					this.OnA1Changing(value);
					this.SendPropertyChanging();
					this._A1 = value;
					this.SendPropertyChanged("A1");
					this.OnA1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A2", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> A2
		{
			get
			{
				return this._A2;
			}
			set
			{
				if ((this._A2 != value))
				{
					this.OnA2Changing(value);
					this.SendPropertyChanging();
					this._A2 = value;
					this.SendPropertyChanged("A2");
					this.OnA2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A3", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> A3
		{
			get
			{
				return this._A3;
			}
			set
			{
				if ((this._A3 != value))
				{
					this.OnA3Changing(value);
					this.SendPropertyChanging();
					this._A3 = value;
					this.SendPropertyChanged("A3");
					this.OnA3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> B
		{
			get
			{
				return this._B;
			}
			set
			{
				if ((this._B != value))
				{
					this.OnBChanging(value);
					this.SendPropertyChanging();
					this._B = value;
					this.SendPropertyChanged("B");
					this.OnBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> C
		{
			get
			{
				return this._C;
			}
			set
			{
				if ((this._C != value))
				{
					this.OnCChanging(value);
					this.SendPropertyChanging();
					this._C = value;
					this.SendPropertyChanged("C");
					this.OnCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_D", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> D
		{
			get
			{
				return this._D;
			}
			set
			{
				if ((this._D != value))
				{
					this.OnDChanging(value);
					this.SendPropertyChanging();
					this._D = value;
					this.SendPropertyChanged("D");
					this.OnDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> E
		{
			get
			{
				return this._E;
			}
			set
			{
				if ((this._E != value))
				{
					this.OnEChanging(value);
					this.SendPropertyChanging();
					this._E = value;
					this.SendPropertyChanged("E");
					this.OnEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F", DbType="Decimal(10,6)")]
		public System.Nullable<decimal> F
		{
			get
			{
				return this._F;
			}
			set
			{
				if ((this._F != value))
				{
					this.OnFChanging(value);
					this.SendPropertyChanging();
					this._F = value;
					this.SendPropertyChanged("F");
					this.OnFChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KappaUserIdentify")]
	public partial class KappaUserIdentify : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KappaUserIdentifyID;
		
		private System.Nullable<int> _TeamID;
		
		private System.Nullable<System.Guid> _UserId;
		
		private string _UserName;
		
		private string _UserAlias;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKappaUserIdentifyIDChanging(int value);
    partial void OnKappaUserIdentifyIDChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserAliasChanging(string value);
    partial void OnUserAliasChanged();
    #endregion
		
		public KappaUserIdentify()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KappaUserIdentifyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KappaUserIdentifyID
		{
			get
			{
				return this._KappaUserIdentifyID;
			}
			set
			{
				if ((this._KappaUserIdentifyID != value))
				{
					this.OnKappaUserIdentifyIDChanging(value);
					this.SendPropertyChanging();
					this._KappaUserIdentifyID = value;
					this.SendPropertyChanged("KappaUserIdentifyID");
					this.OnKappaUserIdentifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int")]
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAlias", DbType="NVarChar(50)")]
		public string UserAlias
		{
			get
			{
				return this._UserAlias;
			}
			set
			{
				if ((this._UserAlias != value))
				{
					this.OnUserAliasChanging(value);
					this.SendPropertyChanging();
					this._UserAlias = value;
					this.SendPropertyChanged("UserAlias");
					this.OnUserAliasChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.E_StudyDesignPurposeAnswer")]
	public partial class E_StudyDesignPurposeAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _E_StudyDesignPurposeAnswerID;
		
		private int _SubmissionID;
		
		private int _StudyDesignPurposeID;
		
		private EntityRef<Submission> _Submission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnE_StudyDesignPurposeAnswerIDChanging(int value);
    partial void OnE_StudyDesignPurposeAnswerIDChanged();
    partial void OnSubmissionIDChanging(int value);
    partial void OnSubmissionIDChanged();
    partial void OnStudyDesignPurposeIDChanging(int value);
    partial void OnStudyDesignPurposeIDChanged();
    #endregion
		
		public E_StudyDesignPurposeAnswer()
		{
			this._Submission = default(EntityRef<Submission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_StudyDesignPurposeAnswerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int E_StudyDesignPurposeAnswerID
		{
			get
			{
				return this._E_StudyDesignPurposeAnswerID;
			}
			set
			{
				if ((this._E_StudyDesignPurposeAnswerID != value))
				{
					this.OnE_StudyDesignPurposeAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._E_StudyDesignPurposeAnswerID = value;
					this.SendPropertyChanged("E_StudyDesignPurposeAnswerID");
					this.OnE_StudyDesignPurposeAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionID", DbType="Int NOT NULL")]
		public int SubmissionID
		{
			get
			{
				return this._SubmissionID;
			}
			set
			{
				if ((this._SubmissionID != value))
				{
					if (this._Submission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionID = value;
					this.SendPropertyChanged("SubmissionID");
					this.OnSubmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyDesignPurposeID", DbType="Int NOT NULL")]
		public int StudyDesignPurposeID
		{
			get
			{
				return this._StudyDesignPurposeID;
			}
			set
			{
				if ((this._StudyDesignPurposeID != value))
				{
					this.OnStudyDesignPurposeIDChanging(value);
					this.SendPropertyChanging();
					this._StudyDesignPurposeID = value;
					this.SendPropertyChanged("StudyDesignPurposeID");
					this.OnStudyDesignPurposeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_E_StudyDesignPurposeAnswer", Storage="_Submission", ThisKey="SubmissionID", OtherKey="SubmissionID", IsForeignKey=true)]
		public Submission Submission
		{
			get
			{
				return this._Submission.Entity;
			}
			set
			{
				Submission previousValue = this._Submission.Entity;
				if (((previousValue != value) 
							|| (this._Submission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Submission.Entity = null;
						previousValue.E_StudyDesignPurposeAnswers.Remove(this);
					}
					this._Submission.Entity = value;
					if ((value != null))
					{
						value.E_StudyDesignPurposeAnswers.Add(this);
						this._SubmissionID = value.SubmissionID;
					}
					else
					{
						this._SubmissionID = default(int);
					}
					this.SendPropertyChanged("Submission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.F_PreventionCategoryAnswer")]
	public partial class F_PreventionCategoryAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _F_PreventionCategoryID;
		
		private int _SubmissionID;
		
		private int _PreventionCategoryID;
		
		private EntityRef<Submission> _Submission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnF_PreventionCategoryIDChanging(int value);
    partial void OnF_PreventionCategoryIDChanged();
    partial void OnSubmissionIDChanging(int value);
    partial void OnSubmissionIDChanged();
    partial void OnPreventionCategoryIDChanging(int value);
    partial void OnPreventionCategoryIDChanged();
    #endregion
		
		public F_PreventionCategoryAnswer()
		{
			this._Submission = default(EntityRef<Submission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_PreventionCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int F_PreventionCategoryID
		{
			get
			{
				return this._F_PreventionCategoryID;
			}
			set
			{
				if ((this._F_PreventionCategoryID != value))
				{
					this.OnF_PreventionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._F_PreventionCategoryID = value;
					this.SendPropertyChanged("F_PreventionCategoryID");
					this.OnF_PreventionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionID", DbType="Int NOT NULL")]
		public int SubmissionID
		{
			get
			{
				return this._SubmissionID;
			}
			set
			{
				if ((this._SubmissionID != value))
				{
					if (this._Submission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionID = value;
					this.SendPropertyChanged("SubmissionID");
					this.OnSubmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreventionCategoryID", DbType="Int NOT NULL")]
		public int PreventionCategoryID
		{
			get
			{
				return this._PreventionCategoryID;
			}
			set
			{
				if ((this._PreventionCategoryID != value))
				{
					this.OnPreventionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._PreventionCategoryID = value;
					this.SendPropertyChanged("PreventionCategoryID");
					this.OnPreventionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_F_PreventionCategoryAnswer", Storage="_Submission", ThisKey="SubmissionID", OtherKey="SubmissionID", IsForeignKey=true)]
		public Submission Submission
		{
			get
			{
				return this._Submission.Entity;
			}
			set
			{
				Submission previousValue = this._Submission.Entity;
				if (((previousValue != value) 
							|| (this._Submission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Submission.Entity = null;
						previousValue.F_PreventionCategoryAnswers.Remove(this);
					}
					this._Submission.Entity = value;
					if ((value != null))
					{
						value.F_PreventionCategoryAnswers.Add(this);
						this._SubmissionID = value.SubmissionID;
					}
					else
					{
						this._SubmissionID = default(int);
					}
					this.SendPropertyChanged("Submission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Abstract")]
	public partial class Abstract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractID;
		
		private string _AdministeringIC;
		
		private string _Abstract1;
		
		private string _AbstractDescPart;
		
		private string _AbstractPublicHeathPart;
		
		private string _AbstractNIHPart;
		
		private string _AbstractProjTermPart;
		
		private string _ProjectTitle;
		
		private System.Nullable<int> _ApplicationID;
		
		private string _Activity;
		
		private string _ProjectNumber;
		
		private System.Nullable<int> _Type;
		
		private string _IC;
		
		private System.Nullable<int> _SerialNumber;
		
		private System.Nullable<int> _SupportYear;
		
		private string _Suffix;
		
		private string _PIProjectLeader;
		
		private string _FY;
		
		private System.Nullable<System.DateTime> _LastExportDate;
		
		private EntitySet<AbstractStatusChangeHistory> _AbstractStatusChangeHistories;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntitySet<Evaluation> _Evaluations1;
		
		private EntitySet<AbstractReviewList> _AbstractReviewLists;
		
		private EntitySet<AbstractReviewList> _AbstractReviewLists1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractIDChanging(int value);
    partial void OnAbstractIDChanged();
    partial void OnAdministeringICChanging(string value);
    partial void OnAdministeringICChanged();
    partial void OnAbstract1Changing(string value);
    partial void OnAbstract1Changed();
    partial void OnAbstractDescPartChanging(string value);
    partial void OnAbstractDescPartChanged();
    partial void OnAbstractPublicHeathPartChanging(string value);
    partial void OnAbstractPublicHeathPartChanged();
    partial void OnAbstractNIHPartChanging(string value);
    partial void OnAbstractNIHPartChanged();
    partial void OnAbstractProjTermPartChanging(string value);
    partial void OnAbstractProjTermPartChanged();
    partial void OnProjectTitleChanging(string value);
    partial void OnProjectTitleChanged();
    partial void OnApplicationIDChanging(System.Nullable<int> value);
    partial void OnApplicationIDChanged();
    partial void OnActivityChanging(string value);
    partial void OnActivityChanged();
    partial void OnProjectNumberChanging(string value);
    partial void OnProjectNumberChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnICChanging(string value);
    partial void OnICChanged();
    partial void OnSerialNumberChanging(System.Nullable<int> value);
    partial void OnSerialNumberChanged();
    partial void OnSupportYearChanging(System.Nullable<int> value);
    partial void OnSupportYearChanged();
    partial void OnSuffixChanging(string value);
    partial void OnSuffixChanged();
    partial void OnPIProjectLeaderChanging(string value);
    partial void OnPIProjectLeaderChanged();
    partial void OnFYChanging(string value);
    partial void OnFYChanged();
    partial void OnLastExportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastExportDateChanged();
    #endregion
		
		public Abstract()
		{
			this._AbstractStatusChangeHistories = new EntitySet<AbstractStatusChangeHistory>(new Action<AbstractStatusChangeHistory>(this.attach_AbstractStatusChangeHistories), new Action<AbstractStatusChangeHistory>(this.detach_AbstractStatusChangeHistories));
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Evaluations1 = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations1), new Action<Evaluation>(this.detach_Evaluations1));
			this._AbstractReviewLists = new EntitySet<AbstractReviewList>(new Action<AbstractReviewList>(this.attach_AbstractReviewLists), new Action<AbstractReviewList>(this.detach_AbstractReviewLists));
			this._AbstractReviewLists1 = new EntitySet<AbstractReviewList>(new Action<AbstractReviewList>(this.attach_AbstractReviewLists1), new Action<AbstractReviewList>(this.detach_AbstractReviewLists1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbstractID
		{
			get
			{
				return this._AbstractID;
			}
			set
			{
				if ((this._AbstractID != value))
				{
					this.OnAbstractIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractID = value;
					this.SendPropertyChanged("AbstractID");
					this.OnAbstractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministeringIC", DbType="NVarChar(20)")]
		public string AdministeringIC
		{
			get
			{
				return this._AdministeringIC;
			}
			set
			{
				if ((this._AdministeringIC != value))
				{
					this.OnAdministeringICChanging(value);
					this.SendPropertyChanging();
					this._AdministeringIC = value;
					this.SendPropertyChanged("AdministeringIC");
					this.OnAdministeringICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Abstract", Storage="_Abstract1", DbType="NVarChar(MAX)")]
		public string Abstract1
		{
			get
			{
				return this._Abstract1;
			}
			set
			{
				if ((this._Abstract1 != value))
				{
					this.OnAbstract1Changing(value);
					this.SendPropertyChanging();
					this._Abstract1 = value;
					this.SendPropertyChanged("Abstract1");
					this.OnAbstract1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractDescPart", DbType="NVarChar(MAX)")]
		public string AbstractDescPart
		{
			get
			{
				return this._AbstractDescPart;
			}
			set
			{
				if ((this._AbstractDescPart != value))
				{
					this.OnAbstractDescPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractDescPart = value;
					this.SendPropertyChanged("AbstractDescPart");
					this.OnAbstractDescPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractPublicHeathPart", DbType="NVarChar(MAX)")]
		public string AbstractPublicHeathPart
		{
			get
			{
				return this._AbstractPublicHeathPart;
			}
			set
			{
				if ((this._AbstractPublicHeathPart != value))
				{
					this.OnAbstractPublicHeathPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractPublicHeathPart = value;
					this.SendPropertyChanged("AbstractPublicHeathPart");
					this.OnAbstractPublicHeathPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractNIHPart", DbType="NVarChar(MAX)")]
		public string AbstractNIHPart
		{
			get
			{
				return this._AbstractNIHPart;
			}
			set
			{
				if ((this._AbstractNIHPart != value))
				{
					this.OnAbstractNIHPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractNIHPart = value;
					this.SendPropertyChanged("AbstractNIHPart");
					this.OnAbstractNIHPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractProjTermPart", DbType="NVarChar(MAX)")]
		public string AbstractProjTermPart
		{
			get
			{
				return this._AbstractProjTermPart;
			}
			set
			{
				if ((this._AbstractProjTermPart != value))
				{
					this.OnAbstractProjTermPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractProjTermPart = value;
					this.SendPropertyChanged("AbstractProjTermPart");
					this.OnAbstractProjTermPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ProjectTitle
		{
			get
			{
				return this._ProjectTitle;
			}
			set
			{
				if ((this._ProjectTitle != value))
				{
					this.OnProjectTitleChanging(value);
					this.SendPropertyChanging();
					this._ProjectTitle = value;
					this.SendPropertyChanged("ProjectTitle");
					this.OnProjectTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="Int")]
		public System.Nullable<int> ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activity", DbType="NVarChar(20)")]
		public string Activity
		{
			get
			{
				return this._Activity;
			}
			set
			{
				if ((this._Activity != value))
				{
					this.OnActivityChanging(value);
					this.SendPropertyChanging();
					this._Activity = value;
					this.SendPropertyChanged("Activity");
					this.OnActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectNumber", DbType="NVarChar(255)")]
		public string ProjectNumber
		{
			get
			{
				return this._ProjectNumber;
			}
			set
			{
				if ((this._ProjectNumber != value))
				{
					this.OnProjectNumberChanging(value);
					this.SendPropertyChanging();
					this._ProjectNumber = value;
					this.SendPropertyChanged("ProjectNumber");
					this.OnProjectNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IC", DbType="NVarChar(20)")]
		public string IC
		{
			get
			{
				return this._IC;
			}
			set
			{
				if ((this._IC != value))
				{
					this.OnICChanging(value);
					this.SendPropertyChanging();
					this._IC = value;
					this.SendPropertyChanged("IC");
					this.OnICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="Int")]
		public System.Nullable<int> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportYear", DbType="Int")]
		public System.Nullable<int> SupportYear
		{
			get
			{
				return this._SupportYear;
			}
			set
			{
				if ((this._SupportYear != value))
				{
					this.OnSupportYearChanging(value);
					this.SendPropertyChanging();
					this._SupportYear = value;
					this.SendPropertyChanged("SupportYear");
					this.OnSupportYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suffix", DbType="NVarChar(255)")]
		public string Suffix
		{
			get
			{
				return this._Suffix;
			}
			set
			{
				if ((this._Suffix != value))
				{
					this.OnSuffixChanging(value);
					this.SendPropertyChanging();
					this._Suffix = value;
					this.SendPropertyChanged("Suffix");
					this.OnSuffixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PIProjectLeader", DbType="NVarChar(255)")]
		public string PIProjectLeader
		{
			get
			{
				return this._PIProjectLeader;
			}
			set
			{
				if ((this._PIProjectLeader != value))
				{
					this.OnPIProjectLeaderChanging(value);
					this.SendPropertyChanging();
					this._PIProjectLeader = value;
					this.SendPropertyChanged("PIProjectLeader");
					this.OnPIProjectLeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FY", DbType="NVarChar(20)")]
		public string FY
		{
			get
			{
				return this._FY;
			}
			set
			{
				if ((this._FY != value))
				{
					this.OnFYChanging(value);
					this.SendPropertyChanging();
					this._FY = value;
					this.SendPropertyChanged("FY");
					this.OnFYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastExportDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastExportDate
		{
			get
			{
				return this._LastExportDate;
			}
			set
			{
				if ((this._LastExportDate != value))
				{
					this.OnLastExportDateChanging(value);
					this.SendPropertyChanging();
					this._LastExportDate = value;
					this.SendPropertyChanged("LastExportDate");
					this.OnLastExportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_AbstractStatusChangeHistory", Storage="_AbstractStatusChangeHistories", ThisKey="AbstractID", OtherKey="AbstractID")]
		public EntitySet<AbstractStatusChangeHistory> AbstractStatusChangeHistories
		{
			get
			{
				return this._AbstractStatusChangeHistories;
			}
			set
			{
				this._AbstractStatusChangeHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_Evaluation", Storage="_Evaluations", ThisKey="AbstractID", OtherKey="AbstractID")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_Evaluation1", Storage="_Evaluations1", ThisKey="AbstractID", OtherKey="AbstractID")]
		public EntitySet<Evaluation> Evaluations1
		{
			get
			{
				return this._Evaluations1;
			}
			set
			{
				this._Evaluations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_AbstractReviewList", Storage="_AbstractReviewLists", ThisKey="AbstractID", OtherKey="AbstractID")]
		public EntitySet<AbstractReviewList> AbstractReviewLists
		{
			get
			{
				return this._AbstractReviewLists;
			}
			set
			{
				this._AbstractReviewLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_AbstractReviewList1", Storage="_AbstractReviewLists1", ThisKey="AbstractID", OtherKey="AbstractID")]
		public EntitySet<AbstractReviewList> AbstractReviewLists1
		{
			get
			{
				return this._AbstractReviewLists1;
			}
			set
			{
				this._AbstractReviewLists1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = this;
		}
		
		private void detach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = null;
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = null;
		}
		
		private void attach_Evaluations1(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Abstract1 = this;
		}
		
		private void detach_Evaluations1(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Abstract1 = null;
		}
		
		private void attach_AbstractReviewLists(AbstractReviewList entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = this;
		}
		
		private void detach_AbstractReviewLists(AbstractReviewList entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = null;
		}
		
		private void attach_AbstractReviewLists1(AbstractReviewList entity)
		{
			this.SendPropertyChanging();
			entity.Abstract1 = this;
		}
		
		private void detach_AbstractReviewLists1(AbstractReviewList entity)
		{
			this.SendPropertyChanging();
			entity.Abstract1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Report_AbstractExcludedList")]
	public partial class Report_AbstractExcludedList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.Guid> _CreatedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractIDChanging(int value);
    partial void OnAbstractIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByChanged();
    #endregion
		
		public Report_AbstractExcludedList()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AbstractID
		{
			get
			{
				return this._AbstractID;
			}
			set
			{
				if ((this._AbstractID != value))
				{
					this.OnAbstractIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractID = value;
					this.SendPropertyChanged("AbstractID");
					this.OnAbstractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
