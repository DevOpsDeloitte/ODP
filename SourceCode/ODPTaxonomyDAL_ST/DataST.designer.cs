#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ODPTaxonomyDAL_ST
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ODP_Taxonomy_DEV")]
	public partial class DataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertA_StudyFocusAnswer(A_StudyFocusAnswer instance);
    partial void UpdateA_StudyFocusAnswer(A_StudyFocusAnswer instance);
    partial void DeleteA_StudyFocusAnswer(A_StudyFocusAnswer instance);
    partial void InsertA_StudyFocusCategory(A_StudyFocusCategory instance);
    partial void UpdateA_StudyFocusCategory(A_StudyFocusCategory instance);
    partial void DeleteA_StudyFocusCategory(A_StudyFocusCategory instance);
    partial void InsertB_EntitiesStudied(B_EntitiesStudied instance);
    partial void UpdateB_EntitiesStudied(B_EntitiesStudied instance);
    partial void DeleteB_EntitiesStudied(B_EntitiesStudied instance);
    partial void InsertB_EntitiesStudiedAnswer(B_EntitiesStudiedAnswer instance);
    partial void UpdateB_EntitiesStudiedAnswer(B_EntitiesStudiedAnswer instance);
    partial void DeleteB_EntitiesStudiedAnswer(B_EntitiesStudiedAnswer instance);
    partial void InsertC_StudySetting(C_StudySetting instance);
    partial void UpdateC_StudySetting(C_StudySetting instance);
    partial void DeleteC_StudySetting(C_StudySetting instance);
    partial void InsertC_StudySettingAnswer(C_StudySettingAnswer instance);
    partial void UpdateC_StudySettingAnswer(C_StudySettingAnswer instance);
    partial void DeleteC_StudySettingAnswer(C_StudySettingAnswer instance);
    partial void InsertD_PopulationFocus(D_PopulationFocus instance);
    partial void UpdateD_PopulationFocus(D_PopulationFocus instance);
    partial void DeleteD_PopulationFocus(D_PopulationFocus instance);
    partial void InsertD_PopulationFocusAnswer(D_PopulationFocusAnswer instance);
    partial void UpdateD_PopulationFocusAnswer(D_PopulationFocusAnswer instance);
    partial void DeleteD_PopulationFocusAnswer(D_PopulationFocusAnswer instance);
    partial void InsertE_StudyDesignPurpose(E_StudyDesignPurpose instance);
    partial void UpdateE_StudyDesignPurpose(E_StudyDesignPurpose instance);
    partial void DeleteE_StudyDesignPurpose(E_StudyDesignPurpose instance);
    partial void InsertE_StudyDesignPurposeAnswer(E_StudyDesignPurposeAnswer instance);
    partial void UpdateE_StudyDesignPurposeAnswer(E_StudyDesignPurposeAnswer instance);
    partial void DeleteE_StudyDesignPurposeAnswer(E_StudyDesignPurposeAnswer instance);
    partial void InsertF_PreventionCategory(F_PreventionCategory instance);
    partial void UpdateF_PreventionCategory(F_PreventionCategory instance);
    partial void DeleteF_PreventionCategory(F_PreventionCategory instance);
    partial void InsertF_PreventionCategoryAnswer(F_PreventionCategoryAnswer instance);
    partial void UpdateF_PreventionCategoryAnswer(F_PreventionCategoryAnswer instance);
    partial void DeleteF_PreventionCategoryAnswer(F_PreventionCategoryAnswer instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertSubmissionType(SubmissionType instance);
    partial void UpdateSubmissionType(SubmissionType instance);
    partial void DeleteSubmissionType(SubmissionType instance);
    partial void InsertProtocolVersionControl(ProtocolVersionControl instance);
    partial void UpdateProtocolVersionControl(ProtocolVersionControl instance);
    partial void DeleteProtocolVersionControl(ProtocolVersionControl instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertTeamType(TeamType instance);
    partial void UpdateTeamType(TeamType instance);
    partial void DeleteTeamType(TeamType instance);
    partial void InsertTeamUser(TeamUser instance);
    partial void UpdateTeamUser(TeamUser instance);
    partial void DeleteTeamUser(TeamUser instance);
    partial void InsertEvaluation(Evaluation instance);
    partial void UpdateEvaluation(Evaluation instance);
    partial void DeleteEvaluation(Evaluation instance);
    partial void InsertEvaluationType(EvaluationType instance);
    partial void UpdateEvaluationType(EvaluationType instance);
    partial void DeleteEvaluationType(EvaluationType instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertAbstractStatusChangeHistory(AbstractStatusChangeHistory instance);
    partial void UpdateAbstractStatusChangeHistory(AbstractStatusChangeHistory instance);
    partial void DeleteAbstractStatusChangeHistory(AbstractStatusChangeHistory instance);
    partial void InsertAbstractStatus(AbstractStatus instance);
    partial void UpdateAbstractStatus(AbstractStatus instance);
    partial void DeleteAbstractStatus(AbstractStatus instance);
    partial void InsertAbstract(Abstract instance);
    partial void UpdateAbstract(Abstract instance);
    partial void DeleteAbstract(Abstract instance);
    partial void InsertSubmission(Submission instance);
    partial void UpdateSubmission(Submission instance);
    partial void DeleteSubmission(Submission instance);
    partial void InsertA_StudyFocus(A_StudyFocus instance);
    partial void UpdateA_StudyFocus(A_StudyFocus instance);
    partial void DeleteA_StudyFocus(A_StudyFocus instance);
    partial void InsertProtocol(Protocol instance);
    partial void UpdateProtocol(Protocol instance);
    partial void DeleteProtocol(Protocol instance);
    #endregion
		
		public DataDataContext() : 
				base(global::ODPTaxonomyDAL_ST.Properties.Settings.Default.ODP_Taxonomy_DEVConnectionString3, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<A_StudyFocusAnswer> A_StudyFocusAnswers
		{
			get
			{
				return this.GetTable<A_StudyFocusAnswer>();
			}
		}
		
		public System.Data.Linq.Table<A_StudyFocusCategory> A_StudyFocusCategories
		{
			get
			{
				return this.GetTable<A_StudyFocusCategory>();
			}
		}
		
		public System.Data.Linq.Table<B_EntitiesStudied> B_EntitiesStudieds
		{
			get
			{
				return this.GetTable<B_EntitiesStudied>();
			}
		}
		
		public System.Data.Linq.Table<B_EntitiesStudiedAnswer> B_EntitiesStudiedAnswers
		{
			get
			{
				return this.GetTable<B_EntitiesStudiedAnswer>();
			}
		}
		
		public System.Data.Linq.Table<C_StudySetting> C_StudySettings
		{
			get
			{
				return this.GetTable<C_StudySetting>();
			}
		}
		
		public System.Data.Linq.Table<C_StudySettingAnswer> C_StudySettingAnswers
		{
			get
			{
				return this.GetTable<C_StudySettingAnswer>();
			}
		}
		
		public System.Data.Linq.Table<D_PopulationFocus> D_PopulationFocus
		{
			get
			{
				return this.GetTable<D_PopulationFocus>();
			}
		}
		
		public System.Data.Linq.Table<D_PopulationFocusAnswer> D_PopulationFocusAnswers
		{
			get
			{
				return this.GetTable<D_PopulationFocusAnswer>();
			}
		}
		
		public System.Data.Linq.Table<E_StudyDesignPurpose> E_StudyDesignPurposes
		{
			get
			{
				return this.GetTable<E_StudyDesignPurpose>();
			}
		}
		
		public System.Data.Linq.Table<E_StudyDesignPurposeAnswer> E_StudyDesignPurposeAnswers
		{
			get
			{
				return this.GetTable<E_StudyDesignPurposeAnswer>();
			}
		}
		
		public System.Data.Linq.Table<F_PreventionCategory> F_PreventionCategories
		{
			get
			{
				return this.GetTable<F_PreventionCategory>();
			}
		}
		
		public System.Data.Linq.Table<F_PreventionCategoryAnswer> F_PreventionCategoryAnswers
		{
			get
			{
				return this.GetTable<F_PreventionCategoryAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<SubmissionType> SubmissionTypes
		{
			get
			{
				return this.GetTable<SubmissionType>();
			}
		}
		
		public System.Data.Linq.Table<ProtocolHistory> ProtocolHistories
		{
			get
			{
				return this.GetTable<ProtocolHistory>();
			}
		}
		
		public System.Data.Linq.Table<ProtocolVersionControl> ProtocolVersionControls
		{
			get
			{
				return this.GetTable<ProtocolVersionControl>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<TeamType> TeamTypes
		{
			get
			{
				return this.GetTable<TeamType>();
			}
		}
		
		public System.Data.Linq.Table<TeamUser> TeamUsers
		{
			get
			{
				return this.GetTable<TeamUser>();
			}
		}
		
		public System.Data.Linq.Table<Evaluation> Evaluations
		{
			get
			{
				return this.GetTable<Evaluation>();
			}
		}
		
		public System.Data.Linq.Table<EvaluationType> EvaluationTypes
		{
			get
			{
				return this.GetTable<EvaluationType>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<AbstractStatusChangeHistory> AbstractStatusChangeHistories
		{
			get
			{
				return this.GetTable<AbstractStatusChangeHistory>();
			}
		}
		
		public System.Data.Linq.Table<AbstractStatus> AbstractStatus
		{
			get
			{
				return this.GetTable<AbstractStatus>();
			}
		}
		
		public System.Data.Linq.Table<Abstract> Abstracts
		{
			get
			{
				return this.GetTable<Abstract>();
			}
		}
		
		public System.Data.Linq.Table<Submission> Submissions
		{
			get
			{
				return this.GetTable<Submission>();
			}
		}
		
		public System.Data.Linq.Table<A_StudyFocus> A_StudyFocus
		{
			get
			{
				return this.GetTable<A_StudyFocus>();
			}
		}
		
		public System.Data.Linq.Table<Protocol> Protocols
		{
			get
			{
				return this.GetTable<Protocol>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.KappaBaseData_Insert_ByAbs_EvlID")]
		public int KappaBaseData_Insert_ByAbs_EvlID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AbstractID", DbType="Int")] System.Nullable<int> abstractID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EvaluationId", DbType="Int")] System.Nullable<int> evaluationId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AbstractStatusID", DbType="Int")] System.Nullable<int> abstractStatusID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), abstractID, evaluationId, abstractStatusID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ODPComparison_ByAbs_EvlID")]
		public int ODPComparison_ByAbs_EvlID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AbstractID", DbType="Int")] System.Nullable<int> abstractID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EvaluationId", DbType="Int")] System.Nullable<int> evaluationId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AbstractStatusID", DbType="Int")] System.Nullable<int> abstractStatusID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), abstractID, evaluationId, abstractStatusID);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.A_StudyFocusAnswer")]
	public partial class A_StudyFocusAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _A_StudyFocusAnswerID;
		
		private int _SubmissionID;
		
		private int _StudyFocusID;
		
		private bool _StudyFocus_A1;
		
		private bool _StudyFocus_A2;
		
		private bool _StudyFocus_A3;
		
		private EntityRef<Submission> _Submission;
		
		private EntityRef<A_StudyFocus> _A_StudyFocus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnA_StudyFocusAnswerIDChanging(int value);
    partial void OnA_StudyFocusAnswerIDChanged();
    partial void OnSubmissionIDChanging(int value);
    partial void OnSubmissionIDChanged();
    partial void OnStudyFocusIDChanging(int value);
    partial void OnStudyFocusIDChanged();
    partial void OnStudyFocus_A1Changing(bool value);
    partial void OnStudyFocus_A1Changed();
    partial void OnStudyFocus_A2Changing(bool value);
    partial void OnStudyFocus_A2Changed();
    partial void OnStudyFocus_A3Changing(bool value);
    partial void OnStudyFocus_A3Changed();
    #endregion
		
		public A_StudyFocusAnswer()
		{
			this._Submission = default(EntityRef<Submission>);
			this._A_StudyFocus = default(EntityRef<A_StudyFocus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_StudyFocusAnswerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int A_StudyFocusAnswerID
		{
			get
			{
				return this._A_StudyFocusAnswerID;
			}
			set
			{
				if ((this._A_StudyFocusAnswerID != value))
				{
					this.OnA_StudyFocusAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._A_StudyFocusAnswerID = value;
					this.SendPropertyChanged("A_StudyFocusAnswerID");
					this.OnA_StudyFocusAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionID", DbType="Int NOT NULL")]
		public int SubmissionID
		{
			get
			{
				return this._SubmissionID;
			}
			set
			{
				if ((this._SubmissionID != value))
				{
					if (this._Submission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionID = value;
					this.SendPropertyChanged("SubmissionID");
					this.OnSubmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyFocusID", DbType="Int NOT NULL")]
		public int StudyFocusID
		{
			get
			{
				return this._StudyFocusID;
			}
			set
			{
				if ((this._StudyFocusID != value))
				{
					if (this._A_StudyFocus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyFocusIDChanging(value);
					this.SendPropertyChanging();
					this._StudyFocusID = value;
					this.SendPropertyChanged("StudyFocusID");
					this.OnStudyFocusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyFocus_A1", DbType="Bit NOT NULL")]
		public bool StudyFocus_A1
		{
			get
			{
				return this._StudyFocus_A1;
			}
			set
			{
				if ((this._StudyFocus_A1 != value))
				{
					this.OnStudyFocus_A1Changing(value);
					this.SendPropertyChanging();
					this._StudyFocus_A1 = value;
					this.SendPropertyChanged("StudyFocus_A1");
					this.OnStudyFocus_A1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyFocus_A2", DbType="Bit NOT NULL")]
		public bool StudyFocus_A2
		{
			get
			{
				return this._StudyFocus_A2;
			}
			set
			{
				if ((this._StudyFocus_A2 != value))
				{
					this.OnStudyFocus_A2Changing(value);
					this.SendPropertyChanging();
					this._StudyFocus_A2 = value;
					this.SendPropertyChanged("StudyFocus_A2");
					this.OnStudyFocus_A2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyFocus_A3", DbType="Bit NOT NULL")]
		public bool StudyFocus_A3
		{
			get
			{
				return this._StudyFocus_A3;
			}
			set
			{
				if ((this._StudyFocus_A3 != value))
				{
					this.OnStudyFocus_A3Changing(value);
					this.SendPropertyChanging();
					this._StudyFocus_A3 = value;
					this.SendPropertyChanged("StudyFocus_A3");
					this.OnStudyFocus_A3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_A_StudyFocusAnswer", Storage="_Submission", ThisKey="SubmissionID", OtherKey="SubmissionID", IsForeignKey=true)]
		public Submission Submission
		{
			get
			{
				return this._Submission.Entity;
			}
			set
			{
				Submission previousValue = this._Submission.Entity;
				if (((previousValue != value) 
							|| (this._Submission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Submission.Entity = null;
						previousValue.A_StudyFocusAnswers.Remove(this);
					}
					this._Submission.Entity = value;
					if ((value != null))
					{
						value.A_StudyFocusAnswers.Add(this);
						this._SubmissionID = value.SubmissionID;
					}
					else
					{
						this._SubmissionID = default(int);
					}
					this.SendPropertyChanged("Submission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="A_StudyFocus_A_StudyFocusAnswer", Storage="_A_StudyFocus", ThisKey="StudyFocusID", OtherKey="StudyFocusID", IsForeignKey=true)]
		public A_StudyFocus A_StudyFocus
		{
			get
			{
				return this._A_StudyFocus.Entity;
			}
			set
			{
				A_StudyFocus previousValue = this._A_StudyFocus.Entity;
				if (((previousValue != value) 
							|| (this._A_StudyFocus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._A_StudyFocus.Entity = null;
						previousValue.A_StudyFocusAnswers.Remove(this);
					}
					this._A_StudyFocus.Entity = value;
					if ((value != null))
					{
						value.A_StudyFocusAnswers.Add(this);
						this._StudyFocusID = value.StudyFocusID;
					}
					else
					{
						this._StudyFocusID = default(int);
					}
					this.SendPropertyChanged("A_StudyFocus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.A_StudyFocusCategory")]
	public partial class A_StudyFocusCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudyFocusCategoryID;
		
		private string _StudyFocusCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudyFocusCategoryIDChanging(int value);
    partial void OnStudyFocusCategoryIDChanged();
    partial void OnStudyFocusCategoryChanging(string value);
    partial void OnStudyFocusCategoryChanged();
    #endregion
		
		public A_StudyFocusCategory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyFocusCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StudyFocusCategoryID
		{
			get
			{
				return this._StudyFocusCategoryID;
			}
			set
			{
				if ((this._StudyFocusCategoryID != value))
				{
					this.OnStudyFocusCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._StudyFocusCategoryID = value;
					this.SendPropertyChanged("StudyFocusCategoryID");
					this.OnStudyFocusCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyFocusCategory", DbType="NVarChar(20)")]
		public string StudyFocusCategory
		{
			get
			{
				return this._StudyFocusCategory;
			}
			set
			{
				if ((this._StudyFocusCategory != value))
				{
					this.OnStudyFocusCategoryChanging(value);
					this.SendPropertyChanging();
					this._StudyFocusCategory = value;
					this.SendPropertyChanged("StudyFocusCategory");
					this.OnStudyFocusCategoryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.B_EntitiesStudied")]
	public partial class B_EntitiesStudied : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntitiesStudiedID;
		
		private string _EntitiesStudied;
		
		private System.Nullable<int> _Sort;
		
		private System.Nullable<int> _StatusID;
		
		private EntitySet<B_EntitiesStudiedAnswer> _B_EntitiesStudiedAnswers;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntitiesStudiedIDChanging(int value);
    partial void OnEntitiesStudiedIDChanged();
    partial void OnEntitiesStudiedChanging(string value);
    partial void OnEntitiesStudiedChanged();
    partial void OnSortChanging(System.Nullable<int> value);
    partial void OnSortChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
		
		public B_EntitiesStudied()
		{
			this._B_EntitiesStudiedAnswers = new EntitySet<B_EntitiesStudiedAnswer>(new Action<B_EntitiesStudiedAnswer>(this.attach_B_EntitiesStudiedAnswers), new Action<B_EntitiesStudiedAnswer>(this.detach_B_EntitiesStudiedAnswers));
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntitiesStudiedID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EntitiesStudiedID
		{
			get
			{
				return this._EntitiesStudiedID;
			}
			set
			{
				if ((this._EntitiesStudiedID != value))
				{
					this.OnEntitiesStudiedIDChanging(value);
					this.SendPropertyChanging();
					this._EntitiesStudiedID = value;
					this.SendPropertyChanged("EntitiesStudiedID");
					this.OnEntitiesStudiedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntitiesStudied", DbType="NVarChar(255)")]
		public string EntitiesStudied
		{
			get
			{
				return this._EntitiesStudied;
			}
			set
			{
				if ((this._EntitiesStudied != value))
				{
					this.OnEntitiesStudiedChanging(value);
					this.SendPropertyChanging();
					this._EntitiesStudied = value;
					this.SendPropertyChanged("EntitiesStudied");
					this.OnEntitiesStudiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sort", DbType="Int")]
		public System.Nullable<int> Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B_EntitiesStudied_B_EntitiesStudiedAnswer", Storage="_B_EntitiesStudiedAnswers", ThisKey="EntitiesStudiedID", OtherKey="EntitiesStudiedID")]
		public EntitySet<B_EntitiesStudiedAnswer> B_EntitiesStudiedAnswers
		{
			get
			{
				return this._B_EntitiesStudiedAnswers;
			}
			set
			{
				this._B_EntitiesStudiedAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_B_EntitiesStudied", Storage="_Status", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.B_EntitiesStudieds.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.B_EntitiesStudieds.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_B_EntitiesStudiedAnswers(B_EntitiesStudiedAnswer entity)
		{
			this.SendPropertyChanging();
			entity.B_EntitiesStudied = this;
		}
		
		private void detach_B_EntitiesStudiedAnswers(B_EntitiesStudiedAnswer entity)
		{
			this.SendPropertyChanging();
			entity.B_EntitiesStudied = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.B_EntitiesStudiedAnswer")]
	public partial class B_EntitiesStudiedAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _B_EntitiesStudiedAnswerID;
		
		private int _SubmissionID;
		
		private int _EntitiesStudiedID;
		
		private EntityRef<B_EntitiesStudied> _B_EntitiesStudied;
		
		private EntityRef<Submission> _Submission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnB_EntitiesStudiedAnswerIDChanging(int value);
    partial void OnB_EntitiesStudiedAnswerIDChanged();
    partial void OnSubmissionIDChanging(int value);
    partial void OnSubmissionIDChanged();
    partial void OnEntitiesStudiedIDChanging(int value);
    partial void OnEntitiesStudiedIDChanged();
    #endregion
		
		public B_EntitiesStudiedAnswer()
		{
			this._B_EntitiesStudied = default(EntityRef<B_EntitiesStudied>);
			this._Submission = default(EntityRef<Submission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_EntitiesStudiedAnswerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int B_EntitiesStudiedAnswerID
		{
			get
			{
				return this._B_EntitiesStudiedAnswerID;
			}
			set
			{
				if ((this._B_EntitiesStudiedAnswerID != value))
				{
					this.OnB_EntitiesStudiedAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._B_EntitiesStudiedAnswerID = value;
					this.SendPropertyChanged("B_EntitiesStudiedAnswerID");
					this.OnB_EntitiesStudiedAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionID", DbType="Int NOT NULL")]
		public int SubmissionID
		{
			get
			{
				return this._SubmissionID;
			}
			set
			{
				if ((this._SubmissionID != value))
				{
					if (this._Submission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionID = value;
					this.SendPropertyChanged("SubmissionID");
					this.OnSubmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntitiesStudiedID", DbType="Int NOT NULL")]
		public int EntitiesStudiedID
		{
			get
			{
				return this._EntitiesStudiedID;
			}
			set
			{
				if ((this._EntitiesStudiedID != value))
				{
					if (this._B_EntitiesStudied.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntitiesStudiedIDChanging(value);
					this.SendPropertyChanging();
					this._EntitiesStudiedID = value;
					this.SendPropertyChanged("EntitiesStudiedID");
					this.OnEntitiesStudiedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="B_EntitiesStudied_B_EntitiesStudiedAnswer", Storage="_B_EntitiesStudied", ThisKey="EntitiesStudiedID", OtherKey="EntitiesStudiedID", IsForeignKey=true)]
		public B_EntitiesStudied B_EntitiesStudied
		{
			get
			{
				return this._B_EntitiesStudied.Entity;
			}
			set
			{
				B_EntitiesStudied previousValue = this._B_EntitiesStudied.Entity;
				if (((previousValue != value) 
							|| (this._B_EntitiesStudied.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._B_EntitiesStudied.Entity = null;
						previousValue.B_EntitiesStudiedAnswers.Remove(this);
					}
					this._B_EntitiesStudied.Entity = value;
					if ((value != null))
					{
						value.B_EntitiesStudiedAnswers.Add(this);
						this._EntitiesStudiedID = value.EntitiesStudiedID;
					}
					else
					{
						this._EntitiesStudiedID = default(int);
					}
					this.SendPropertyChanged("B_EntitiesStudied");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_B_EntitiesStudiedAnswer", Storage="_Submission", ThisKey="SubmissionID", OtherKey="SubmissionID", IsForeignKey=true)]
		public Submission Submission
		{
			get
			{
				return this._Submission.Entity;
			}
			set
			{
				Submission previousValue = this._Submission.Entity;
				if (((previousValue != value) 
							|| (this._Submission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Submission.Entity = null;
						previousValue.B_EntitiesStudiedAnswers.Remove(this);
					}
					this._Submission.Entity = value;
					if ((value != null))
					{
						value.B_EntitiesStudiedAnswers.Add(this);
						this._SubmissionID = value.SubmissionID;
					}
					else
					{
						this._SubmissionID = default(int);
					}
					this.SendPropertyChanged("Submission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.C_StudySetting")]
	public partial class C_StudySetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudySettingID;
		
		private string _StudySetting;
		
		private System.Nullable<int> _Sort;
		
		private System.Nullable<int> _StatusID;
		
		private EntitySet<C_StudySettingAnswer> _C_StudySettingAnswers;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudySettingIDChanging(int value);
    partial void OnStudySettingIDChanged();
    partial void OnStudySettingChanging(string value);
    partial void OnStudySettingChanged();
    partial void OnSortChanging(System.Nullable<int> value);
    partial void OnSortChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
		
		public C_StudySetting()
		{
			this._C_StudySettingAnswers = new EntitySet<C_StudySettingAnswer>(new Action<C_StudySettingAnswer>(this.attach_C_StudySettingAnswers), new Action<C_StudySettingAnswer>(this.detach_C_StudySettingAnswers));
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudySettingID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StudySettingID
		{
			get
			{
				return this._StudySettingID;
			}
			set
			{
				if ((this._StudySettingID != value))
				{
					this.OnStudySettingIDChanging(value);
					this.SendPropertyChanging();
					this._StudySettingID = value;
					this.SendPropertyChanged("StudySettingID");
					this.OnStudySettingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudySetting", DbType="NVarChar(255)")]
		public string StudySetting
		{
			get
			{
				return this._StudySetting;
			}
			set
			{
				if ((this._StudySetting != value))
				{
					this.OnStudySettingChanging(value);
					this.SendPropertyChanging();
					this._StudySetting = value;
					this.SendPropertyChanged("StudySetting");
					this.OnStudySettingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sort", DbType="Int")]
		public System.Nullable<int> Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="C_StudySetting_C_StudySettingAnswer", Storage="_C_StudySettingAnswers", ThisKey="StudySettingID", OtherKey="StudySettingID")]
		public EntitySet<C_StudySettingAnswer> C_StudySettingAnswers
		{
			get
			{
				return this._C_StudySettingAnswers;
			}
			set
			{
				this._C_StudySettingAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_C_StudySetting", Storage="_Status", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.C_StudySettings.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.C_StudySettings.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_C_StudySettingAnswers(C_StudySettingAnswer entity)
		{
			this.SendPropertyChanging();
			entity.C_StudySetting = this;
		}
		
		private void detach_C_StudySettingAnswers(C_StudySettingAnswer entity)
		{
			this.SendPropertyChanging();
			entity.C_StudySetting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.C_StudySettingAnswer")]
	public partial class C_StudySettingAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _C_StudySettingAnswerID;
		
		private int _SubmissionID;
		
		private int _StudySettingID;
		
		private EntityRef<C_StudySetting> _C_StudySetting;
		
		private EntityRef<Submission> _Submission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC_StudySettingAnswerIDChanging(int value);
    partial void OnC_StudySettingAnswerIDChanged();
    partial void OnSubmissionIDChanging(int value);
    partial void OnSubmissionIDChanged();
    partial void OnStudySettingIDChanging(int value);
    partial void OnStudySettingIDChanged();
    #endregion
		
		public C_StudySettingAnswer()
		{
			this._C_StudySetting = default(EntityRef<C_StudySetting>);
			this._Submission = default(EntityRef<Submission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_StudySettingAnswerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int C_StudySettingAnswerID
		{
			get
			{
				return this._C_StudySettingAnswerID;
			}
			set
			{
				if ((this._C_StudySettingAnswerID != value))
				{
					this.OnC_StudySettingAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._C_StudySettingAnswerID = value;
					this.SendPropertyChanged("C_StudySettingAnswerID");
					this.OnC_StudySettingAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionID", DbType="Int NOT NULL")]
		public int SubmissionID
		{
			get
			{
				return this._SubmissionID;
			}
			set
			{
				if ((this._SubmissionID != value))
				{
					if (this._Submission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionID = value;
					this.SendPropertyChanged("SubmissionID");
					this.OnSubmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudySettingID", DbType="Int NOT NULL")]
		public int StudySettingID
		{
			get
			{
				return this._StudySettingID;
			}
			set
			{
				if ((this._StudySettingID != value))
				{
					if (this._C_StudySetting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudySettingIDChanging(value);
					this.SendPropertyChanging();
					this._StudySettingID = value;
					this.SendPropertyChanged("StudySettingID");
					this.OnStudySettingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="C_StudySetting_C_StudySettingAnswer", Storage="_C_StudySetting", ThisKey="StudySettingID", OtherKey="StudySettingID", IsForeignKey=true)]
		public C_StudySetting C_StudySetting
		{
			get
			{
				return this._C_StudySetting.Entity;
			}
			set
			{
				C_StudySetting previousValue = this._C_StudySetting.Entity;
				if (((previousValue != value) 
							|| (this._C_StudySetting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._C_StudySetting.Entity = null;
						previousValue.C_StudySettingAnswers.Remove(this);
					}
					this._C_StudySetting.Entity = value;
					if ((value != null))
					{
						value.C_StudySettingAnswers.Add(this);
						this._StudySettingID = value.StudySettingID;
					}
					else
					{
						this._StudySettingID = default(int);
					}
					this.SendPropertyChanged("C_StudySetting");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_C_StudySettingAnswer", Storage="_Submission", ThisKey="SubmissionID", OtherKey="SubmissionID", IsForeignKey=true)]
		public Submission Submission
		{
			get
			{
				return this._Submission.Entity;
			}
			set
			{
				Submission previousValue = this._Submission.Entity;
				if (((previousValue != value) 
							|| (this._Submission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Submission.Entity = null;
						previousValue.C_StudySettingAnswers.Remove(this);
					}
					this._Submission.Entity = value;
					if ((value != null))
					{
						value.C_StudySettingAnswers.Add(this);
						this._SubmissionID = value.SubmissionID;
					}
					else
					{
						this._SubmissionID = default(int);
					}
					this.SendPropertyChanged("Submission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.D_PopulationFocus")]
	public partial class D_PopulationFocus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PopulationFocusID;
		
		private string _PopulationFocus;
		
		private System.Nullable<int> _Sort;
		
		private System.Nullable<int> _StatusID;
		
		private EntitySet<D_PopulationFocusAnswer> _D_PopulationFocusAnswers;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPopulationFocusIDChanging(int value);
    partial void OnPopulationFocusIDChanged();
    partial void OnPopulationFocusChanging(string value);
    partial void OnPopulationFocusChanged();
    partial void OnSortChanging(System.Nullable<int> value);
    partial void OnSortChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
		
		public D_PopulationFocus()
		{
			this._D_PopulationFocusAnswers = new EntitySet<D_PopulationFocusAnswer>(new Action<D_PopulationFocusAnswer>(this.attach_D_PopulationFocusAnswers), new Action<D_PopulationFocusAnswer>(this.detach_D_PopulationFocusAnswers));
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PopulationFocusID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PopulationFocusID
		{
			get
			{
				return this._PopulationFocusID;
			}
			set
			{
				if ((this._PopulationFocusID != value))
				{
					this.OnPopulationFocusIDChanging(value);
					this.SendPropertyChanging();
					this._PopulationFocusID = value;
					this.SendPropertyChanged("PopulationFocusID");
					this.OnPopulationFocusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PopulationFocus", DbType="NVarChar(255)")]
		public string PopulationFocus
		{
			get
			{
				return this._PopulationFocus;
			}
			set
			{
				if ((this._PopulationFocus != value))
				{
					this.OnPopulationFocusChanging(value);
					this.SendPropertyChanging();
					this._PopulationFocus = value;
					this.SendPropertyChanged("PopulationFocus");
					this.OnPopulationFocusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sort", DbType="Int")]
		public System.Nullable<int> Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="D_PopulationFocus_D_PopulationFocusAnswer", Storage="_D_PopulationFocusAnswers", ThisKey="PopulationFocusID", OtherKey="PopulationFocusID")]
		public EntitySet<D_PopulationFocusAnswer> D_PopulationFocusAnswers
		{
			get
			{
				return this._D_PopulationFocusAnswers;
			}
			set
			{
				this._D_PopulationFocusAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_D_PopulationFocus", Storage="_Status", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.D_PopulationFocus.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.D_PopulationFocus.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_D_PopulationFocusAnswers(D_PopulationFocusAnswer entity)
		{
			this.SendPropertyChanging();
			entity.D_PopulationFocus = this;
		}
		
		private void detach_D_PopulationFocusAnswers(D_PopulationFocusAnswer entity)
		{
			this.SendPropertyChanging();
			entity.D_PopulationFocus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.D_PopulationFocusAnswer")]
	public partial class D_PopulationFocusAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _D_PopulationFocusAnswerID;
		
		private System.Nullable<int> _SubmissionID;
		
		private System.Nullable<int> _PopulationFocusID;
		
		private EntityRef<D_PopulationFocus> _D_PopulationFocus;
		
		private EntityRef<Submission> _Submission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnD_PopulationFocusAnswerIDChanging(int value);
    partial void OnD_PopulationFocusAnswerIDChanged();
    partial void OnSubmissionIDChanging(System.Nullable<int> value);
    partial void OnSubmissionIDChanged();
    partial void OnPopulationFocusIDChanging(System.Nullable<int> value);
    partial void OnPopulationFocusIDChanged();
    #endregion
		
		public D_PopulationFocusAnswer()
		{
			this._D_PopulationFocus = default(EntityRef<D_PopulationFocus>);
			this._Submission = default(EntityRef<Submission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_D_PopulationFocusAnswerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int D_PopulationFocusAnswerID
		{
			get
			{
				return this._D_PopulationFocusAnswerID;
			}
			set
			{
				if ((this._D_PopulationFocusAnswerID != value))
				{
					this.OnD_PopulationFocusAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._D_PopulationFocusAnswerID = value;
					this.SendPropertyChanged("D_PopulationFocusAnswerID");
					this.OnD_PopulationFocusAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionID", DbType="Int")]
		public System.Nullable<int> SubmissionID
		{
			get
			{
				return this._SubmissionID;
			}
			set
			{
				if ((this._SubmissionID != value))
				{
					if (this._Submission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionID = value;
					this.SendPropertyChanged("SubmissionID");
					this.OnSubmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PopulationFocusID", DbType="Int")]
		public System.Nullable<int> PopulationFocusID
		{
			get
			{
				return this._PopulationFocusID;
			}
			set
			{
				if ((this._PopulationFocusID != value))
				{
					if (this._D_PopulationFocus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPopulationFocusIDChanging(value);
					this.SendPropertyChanging();
					this._PopulationFocusID = value;
					this.SendPropertyChanged("PopulationFocusID");
					this.OnPopulationFocusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="D_PopulationFocus_D_PopulationFocusAnswer", Storage="_D_PopulationFocus", ThisKey="PopulationFocusID", OtherKey="PopulationFocusID", IsForeignKey=true)]
		public D_PopulationFocus D_PopulationFocus
		{
			get
			{
				return this._D_PopulationFocus.Entity;
			}
			set
			{
				D_PopulationFocus previousValue = this._D_PopulationFocus.Entity;
				if (((previousValue != value) 
							|| (this._D_PopulationFocus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._D_PopulationFocus.Entity = null;
						previousValue.D_PopulationFocusAnswers.Remove(this);
					}
					this._D_PopulationFocus.Entity = value;
					if ((value != null))
					{
						value.D_PopulationFocusAnswers.Add(this);
						this._PopulationFocusID = value.PopulationFocusID;
					}
					else
					{
						this._PopulationFocusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("D_PopulationFocus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_D_PopulationFocusAnswer", Storage="_Submission", ThisKey="SubmissionID", OtherKey="SubmissionID", IsForeignKey=true)]
		public Submission Submission
		{
			get
			{
				return this._Submission.Entity;
			}
			set
			{
				Submission previousValue = this._Submission.Entity;
				if (((previousValue != value) 
							|| (this._Submission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Submission.Entity = null;
						previousValue.D_PopulationFocusAnswers.Remove(this);
					}
					this._Submission.Entity = value;
					if ((value != null))
					{
						value.D_PopulationFocusAnswers.Add(this);
						this._SubmissionID = value.SubmissionID;
					}
					else
					{
						this._SubmissionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Submission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.E_StudyDesignPurpose")]
	public partial class E_StudyDesignPurpose : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudyDesignPurposeID;
		
		private string _StudyDesignPurpose;
		
		private System.Nullable<int> _Sort;
		
		private System.Nullable<int> _StatusID;
		
		private EntitySet<E_StudyDesignPurposeAnswer> _E_StudyDesignPurposeAnswers;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudyDesignPurposeIDChanging(int value);
    partial void OnStudyDesignPurposeIDChanged();
    partial void OnStudyDesignPurposeChanging(string value);
    partial void OnStudyDesignPurposeChanged();
    partial void OnSortChanging(System.Nullable<int> value);
    partial void OnSortChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
		
		public E_StudyDesignPurpose()
		{
			this._E_StudyDesignPurposeAnswers = new EntitySet<E_StudyDesignPurposeAnswer>(new Action<E_StudyDesignPurposeAnswer>(this.attach_E_StudyDesignPurposeAnswers), new Action<E_StudyDesignPurposeAnswer>(this.detach_E_StudyDesignPurposeAnswers));
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyDesignPurposeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StudyDesignPurposeID
		{
			get
			{
				return this._StudyDesignPurposeID;
			}
			set
			{
				if ((this._StudyDesignPurposeID != value))
				{
					this.OnStudyDesignPurposeIDChanging(value);
					this.SendPropertyChanging();
					this._StudyDesignPurposeID = value;
					this.SendPropertyChanged("StudyDesignPurposeID");
					this.OnStudyDesignPurposeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyDesignPurpose", DbType="NVarChar(255)")]
		public string StudyDesignPurpose
		{
			get
			{
				return this._StudyDesignPurpose;
			}
			set
			{
				if ((this._StudyDesignPurpose != value))
				{
					this.OnStudyDesignPurposeChanging(value);
					this.SendPropertyChanging();
					this._StudyDesignPurpose = value;
					this.SendPropertyChanged("StudyDesignPurpose");
					this.OnStudyDesignPurposeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sort", DbType="Int")]
		public System.Nullable<int> Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="E_StudyDesignPurpose_E_StudyDesignPurposeAnswer", Storage="_E_StudyDesignPurposeAnswers", ThisKey="StudyDesignPurposeID", OtherKey="StudyDesignPurposeID")]
		public EntitySet<E_StudyDesignPurposeAnswer> E_StudyDesignPurposeAnswers
		{
			get
			{
				return this._E_StudyDesignPurposeAnswers;
			}
			set
			{
				this._E_StudyDesignPurposeAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_E_StudyDesignPurpose", Storage="_Status", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.E_StudyDesignPurposes.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.E_StudyDesignPurposes.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_E_StudyDesignPurposeAnswers(E_StudyDesignPurposeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.E_StudyDesignPurpose = this;
		}
		
		private void detach_E_StudyDesignPurposeAnswers(E_StudyDesignPurposeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.E_StudyDesignPurpose = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.E_StudyDesignPurposeAnswer")]
	public partial class E_StudyDesignPurposeAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _E_StudyDesignPurposeAnswerID;
		
		private int _SubmissionID;
		
		private int _StudyDesignPurposeID;
		
		private EntityRef<E_StudyDesignPurpose> _E_StudyDesignPurpose;
		
		private EntityRef<Submission> _Submission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnE_StudyDesignPurposeAnswerIDChanging(int value);
    partial void OnE_StudyDesignPurposeAnswerIDChanged();
    partial void OnSubmissionIDChanging(int value);
    partial void OnSubmissionIDChanged();
    partial void OnStudyDesignPurposeIDChanging(int value);
    partial void OnStudyDesignPurposeIDChanged();
    #endregion
		
		public E_StudyDesignPurposeAnswer()
		{
			this._E_StudyDesignPurpose = default(EntityRef<E_StudyDesignPurpose>);
			this._Submission = default(EntityRef<Submission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_StudyDesignPurposeAnswerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int E_StudyDesignPurposeAnswerID
		{
			get
			{
				return this._E_StudyDesignPurposeAnswerID;
			}
			set
			{
				if ((this._E_StudyDesignPurposeAnswerID != value))
				{
					this.OnE_StudyDesignPurposeAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._E_StudyDesignPurposeAnswerID = value;
					this.SendPropertyChanged("E_StudyDesignPurposeAnswerID");
					this.OnE_StudyDesignPurposeAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionID", DbType="Int NOT NULL")]
		public int SubmissionID
		{
			get
			{
				return this._SubmissionID;
			}
			set
			{
				if ((this._SubmissionID != value))
				{
					if (this._Submission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionID = value;
					this.SendPropertyChanged("SubmissionID");
					this.OnSubmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyDesignPurposeID", DbType="Int NOT NULL")]
		public int StudyDesignPurposeID
		{
			get
			{
				return this._StudyDesignPurposeID;
			}
			set
			{
				if ((this._StudyDesignPurposeID != value))
				{
					if (this._E_StudyDesignPurpose.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyDesignPurposeIDChanging(value);
					this.SendPropertyChanging();
					this._StudyDesignPurposeID = value;
					this.SendPropertyChanged("StudyDesignPurposeID");
					this.OnStudyDesignPurposeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="E_StudyDesignPurpose_E_StudyDesignPurposeAnswer", Storage="_E_StudyDesignPurpose", ThisKey="StudyDesignPurposeID", OtherKey="StudyDesignPurposeID", IsForeignKey=true)]
		public E_StudyDesignPurpose E_StudyDesignPurpose
		{
			get
			{
				return this._E_StudyDesignPurpose.Entity;
			}
			set
			{
				E_StudyDesignPurpose previousValue = this._E_StudyDesignPurpose.Entity;
				if (((previousValue != value) 
							|| (this._E_StudyDesignPurpose.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._E_StudyDesignPurpose.Entity = null;
						previousValue.E_StudyDesignPurposeAnswers.Remove(this);
					}
					this._E_StudyDesignPurpose.Entity = value;
					if ((value != null))
					{
						value.E_StudyDesignPurposeAnswers.Add(this);
						this._StudyDesignPurposeID = value.StudyDesignPurposeID;
					}
					else
					{
						this._StudyDesignPurposeID = default(int);
					}
					this.SendPropertyChanged("E_StudyDesignPurpose");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_E_StudyDesignPurposeAnswer", Storage="_Submission", ThisKey="SubmissionID", OtherKey="SubmissionID", IsForeignKey=true)]
		public Submission Submission
		{
			get
			{
				return this._Submission.Entity;
			}
			set
			{
				Submission previousValue = this._Submission.Entity;
				if (((previousValue != value) 
							|| (this._Submission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Submission.Entity = null;
						previousValue.E_StudyDesignPurposeAnswers.Remove(this);
					}
					this._Submission.Entity = value;
					if ((value != null))
					{
						value.E_StudyDesignPurposeAnswers.Add(this);
						this._SubmissionID = value.SubmissionID;
					}
					else
					{
						this._SubmissionID = default(int);
					}
					this.SendPropertyChanged("Submission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.F_PreventionCategory")]
	public partial class F_PreventionCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PreventionCategoryID;
		
		private string _PreventionCategory;
		
		private System.Nullable<int> _Sort;
		
		private System.Nullable<int> _StatusID;
		
		private EntitySet<F_PreventionCategoryAnswer> _F_PreventionCategoryAnswers;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPreventionCategoryIDChanging(int value);
    partial void OnPreventionCategoryIDChanged();
    partial void OnPreventionCategoryChanging(string value);
    partial void OnPreventionCategoryChanged();
    partial void OnSortChanging(System.Nullable<int> value);
    partial void OnSortChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
		
		public F_PreventionCategory()
		{
			this._F_PreventionCategoryAnswers = new EntitySet<F_PreventionCategoryAnswer>(new Action<F_PreventionCategoryAnswer>(this.attach_F_PreventionCategoryAnswers), new Action<F_PreventionCategoryAnswer>(this.detach_F_PreventionCategoryAnswers));
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreventionCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PreventionCategoryID
		{
			get
			{
				return this._PreventionCategoryID;
			}
			set
			{
				if ((this._PreventionCategoryID != value))
				{
					this.OnPreventionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._PreventionCategoryID = value;
					this.SendPropertyChanged("PreventionCategoryID");
					this.OnPreventionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreventionCategory", DbType="NVarChar(255)")]
		public string PreventionCategory
		{
			get
			{
				return this._PreventionCategory;
			}
			set
			{
				if ((this._PreventionCategory != value))
				{
					this.OnPreventionCategoryChanging(value);
					this.SendPropertyChanging();
					this._PreventionCategory = value;
					this.SendPropertyChanged("PreventionCategory");
					this.OnPreventionCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sort", DbType="Int")]
		public System.Nullable<int> Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="F_PreventionCategory_F_PreventionCategoryAnswer", Storage="_F_PreventionCategoryAnswers", ThisKey="PreventionCategoryID", OtherKey="PreventionCategoryID")]
		public EntitySet<F_PreventionCategoryAnswer> F_PreventionCategoryAnswers
		{
			get
			{
				return this._F_PreventionCategoryAnswers;
			}
			set
			{
				this._F_PreventionCategoryAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_F_PreventionCategory", Storage="_Status", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.F_PreventionCategories.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.F_PreventionCategories.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_F_PreventionCategoryAnswers(F_PreventionCategoryAnswer entity)
		{
			this.SendPropertyChanging();
			entity.F_PreventionCategory = this;
		}
		
		private void detach_F_PreventionCategoryAnswers(F_PreventionCategoryAnswer entity)
		{
			this.SendPropertyChanging();
			entity.F_PreventionCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.F_PreventionCategoryAnswer")]
	public partial class F_PreventionCategoryAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _F_PreventionCategoryID;
		
		private int _SubmissionID;
		
		private int _PreventionCategoryID;
		
		private EntityRef<F_PreventionCategory> _F_PreventionCategory;
		
		private EntityRef<Submission> _Submission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnF_PreventionCategoryIDChanging(int value);
    partial void OnF_PreventionCategoryIDChanged();
    partial void OnSubmissionIDChanging(int value);
    partial void OnSubmissionIDChanged();
    partial void OnPreventionCategoryIDChanging(int value);
    partial void OnPreventionCategoryIDChanged();
    #endregion
		
		public F_PreventionCategoryAnswer()
		{
			this._F_PreventionCategory = default(EntityRef<F_PreventionCategory>);
			this._Submission = default(EntityRef<Submission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_PreventionCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int F_PreventionCategoryID
		{
			get
			{
				return this._F_PreventionCategoryID;
			}
			set
			{
				if ((this._F_PreventionCategoryID != value))
				{
					this.OnF_PreventionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._F_PreventionCategoryID = value;
					this.SendPropertyChanged("F_PreventionCategoryID");
					this.OnF_PreventionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionID", DbType="Int NOT NULL")]
		public int SubmissionID
		{
			get
			{
				return this._SubmissionID;
			}
			set
			{
				if ((this._SubmissionID != value))
				{
					if (this._Submission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionID = value;
					this.SendPropertyChanged("SubmissionID");
					this.OnSubmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreventionCategoryID", DbType="Int NOT NULL")]
		public int PreventionCategoryID
		{
			get
			{
				return this._PreventionCategoryID;
			}
			set
			{
				if ((this._PreventionCategoryID != value))
				{
					if (this._F_PreventionCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreventionCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._PreventionCategoryID = value;
					this.SendPropertyChanged("PreventionCategoryID");
					this.OnPreventionCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="F_PreventionCategory_F_PreventionCategoryAnswer", Storage="_F_PreventionCategory", ThisKey="PreventionCategoryID", OtherKey="PreventionCategoryID", IsForeignKey=true)]
		public F_PreventionCategory F_PreventionCategory
		{
			get
			{
				return this._F_PreventionCategory.Entity;
			}
			set
			{
				F_PreventionCategory previousValue = this._F_PreventionCategory.Entity;
				if (((previousValue != value) 
							|| (this._F_PreventionCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._F_PreventionCategory.Entity = null;
						previousValue.F_PreventionCategoryAnswers.Remove(this);
					}
					this._F_PreventionCategory.Entity = value;
					if ((value != null))
					{
						value.F_PreventionCategoryAnswers.Add(this);
						this._PreventionCategoryID = value.PreventionCategoryID;
					}
					else
					{
						this._PreventionCategoryID = default(int);
					}
					this.SendPropertyChanged("F_PreventionCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_F_PreventionCategoryAnswer", Storage="_Submission", ThisKey="SubmissionID", OtherKey="SubmissionID", IsForeignKey=true)]
		public Submission Submission
		{
			get
			{
				return this._Submission.Entity;
			}
			set
			{
				Submission previousValue = this._Submission.Entity;
				if (((previousValue != value) 
							|| (this._Submission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Submission.Entity = null;
						previousValue.F_PreventionCategoryAnswers.Remove(this);
					}
					this._Submission.Entity = value;
					if ((value != null))
					{
						value.F_PreventionCategoryAnswers.Add(this);
						this._SubmissionID = value.SubmissionID;
					}
					else
					{
						this._SubmissionID = default(int);
					}
					this.SendPropertyChanged("Submission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusID;
		
		private string _Status1;
		
		private EntitySet<B_EntitiesStudied> _B_EntitiesStudieds;
		
		private EntitySet<C_StudySetting> _C_StudySettings;
		
		private EntitySet<D_PopulationFocus> _D_PopulationFocus;
		
		private EntitySet<E_StudyDesignPurpose> _E_StudyDesignPurposes;
		
		private EntitySet<F_PreventionCategory> _F_PreventionCategories;
		
		private EntitySet<ProtocolVersionControl> _ProtocolVersionControls;
		
		private EntitySet<Submission> _Submissions;
		
		private EntitySet<Submission> _Submissions1;
		
		private EntitySet<A_StudyFocus> _A_StudyFocus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatus1Changing(string value);
    partial void OnStatus1Changed();
    #endregion
		
		public Status()
		{
			this._B_EntitiesStudieds = new EntitySet<B_EntitiesStudied>(new Action<B_EntitiesStudied>(this.attach_B_EntitiesStudieds), new Action<B_EntitiesStudied>(this.detach_B_EntitiesStudieds));
			this._C_StudySettings = new EntitySet<C_StudySetting>(new Action<C_StudySetting>(this.attach_C_StudySettings), new Action<C_StudySetting>(this.detach_C_StudySettings));
			this._D_PopulationFocus = new EntitySet<D_PopulationFocus>(new Action<D_PopulationFocus>(this.attach_D_PopulationFocus), new Action<D_PopulationFocus>(this.detach_D_PopulationFocus));
			this._E_StudyDesignPurposes = new EntitySet<E_StudyDesignPurpose>(new Action<E_StudyDesignPurpose>(this.attach_E_StudyDesignPurposes), new Action<E_StudyDesignPurpose>(this.detach_E_StudyDesignPurposes));
			this._F_PreventionCategories = new EntitySet<F_PreventionCategory>(new Action<F_PreventionCategory>(this.attach_F_PreventionCategories), new Action<F_PreventionCategory>(this.detach_F_PreventionCategories));
			this._ProtocolVersionControls = new EntitySet<ProtocolVersionControl>(new Action<ProtocolVersionControl>(this.attach_ProtocolVersionControls), new Action<ProtocolVersionControl>(this.detach_ProtocolVersionControls));
			this._Submissions = new EntitySet<Submission>(new Action<Submission>(this.attach_Submissions), new Action<Submission>(this.detach_Submissions));
			this._Submissions1 = new EntitySet<Submission>(new Action<Submission>(this.attach_Submissions1), new Action<Submission>(this.detach_Submissions1));
			this._A_StudyFocus = new EntitySet<A_StudyFocus>(new Action<A_StudyFocus>(this.attach_A_StudyFocus), new Action<A_StudyFocus>(this.detach_A_StudyFocus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Status", Storage="_Status1", DbType="VarChar(20)")]
		public string Status1
		{
			get
			{
				return this._Status1;
			}
			set
			{
				if ((this._Status1 != value))
				{
					this.OnStatus1Changing(value);
					this.SendPropertyChanging();
					this._Status1 = value;
					this.SendPropertyChanged("Status1");
					this.OnStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_B_EntitiesStudied", Storage="_B_EntitiesStudieds", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<B_EntitiesStudied> B_EntitiesStudieds
		{
			get
			{
				return this._B_EntitiesStudieds;
			}
			set
			{
				this._B_EntitiesStudieds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_C_StudySetting", Storage="_C_StudySettings", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<C_StudySetting> C_StudySettings
		{
			get
			{
				return this._C_StudySettings;
			}
			set
			{
				this._C_StudySettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_D_PopulationFocus", Storage="_D_PopulationFocus", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<D_PopulationFocus> D_PopulationFocus
		{
			get
			{
				return this._D_PopulationFocus;
			}
			set
			{
				this._D_PopulationFocus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_E_StudyDesignPurpose", Storage="_E_StudyDesignPurposes", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<E_StudyDesignPurpose> E_StudyDesignPurposes
		{
			get
			{
				return this._E_StudyDesignPurposes;
			}
			set
			{
				this._E_StudyDesignPurposes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_F_PreventionCategory", Storage="_F_PreventionCategories", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<F_PreventionCategory> F_PreventionCategories
		{
			get
			{
				return this._F_PreventionCategories;
			}
			set
			{
				this._F_PreventionCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_ProtocolVersionControl", Storage="_ProtocolVersionControls", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<ProtocolVersionControl> ProtocolVersionControls
		{
			get
			{
				return this._ProtocolVersionControls;
			}
			set
			{
				this._ProtocolVersionControls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Submission", Storage="_Submissions", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<Submission> Submissions
		{
			get
			{
				return this._Submissions;
			}
			set
			{
				this._Submissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Submission1", Storage="_Submissions1", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<Submission> Submissions1
		{
			get
			{
				return this._Submissions1;
			}
			set
			{
				this._Submissions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_A_StudyFocus", Storage="_A_StudyFocus", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<A_StudyFocus> A_StudyFocus
		{
			get
			{
				return this._A_StudyFocus;
			}
			set
			{
				this._A_StudyFocus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_B_EntitiesStudieds(B_EntitiesStudied entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_B_EntitiesStudieds(B_EntitiesStudied entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
		
		private void attach_C_StudySettings(C_StudySetting entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_C_StudySettings(C_StudySetting entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
		
		private void attach_D_PopulationFocus(D_PopulationFocus entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_D_PopulationFocus(D_PopulationFocus entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
		
		private void attach_E_StudyDesignPurposes(E_StudyDesignPurpose entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_E_StudyDesignPurposes(E_StudyDesignPurpose entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
		
		private void attach_F_PreventionCategories(F_PreventionCategory entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_F_PreventionCategories(F_PreventionCategory entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
		
		private void attach_ProtocolVersionControls(ProtocolVersionControl entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_ProtocolVersionControls(ProtocolVersionControl entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
		
		private void attach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
		
		private void attach_Submissions1(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = this;
		}
		
		private void detach_Submissions1(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = null;
		}
		
		private void attach_A_StudyFocus(A_StudyFocus entity)
		{
			this.SendPropertyChanging();
			entity.Status = this;
		}
		
		private void detach_A_StudyFocus(A_StudyFocus entity)
		{
			this.SendPropertyChanging();
			entity.Status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubmissionType")]
	public partial class SubmissionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _SubmissionTypeId;
		
		private string _SubmissionType1;
		
		private EntitySet<Submission> _Submissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubmissionTypeIdChanging(short value);
    partial void OnSubmissionTypeIdChanged();
    partial void OnSubmissionType1Changing(string value);
    partial void OnSubmissionType1Changed();
    #endregion
		
		public SubmissionType()
		{
			this._Submissions = new EntitySet<Submission>(new Action<Submission>(this.attach_Submissions), new Action<Submission>(this.detach_Submissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionTypeId", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short SubmissionTypeId
		{
			get
			{
				return this._SubmissionTypeId;
			}
			set
			{
				if ((this._SubmissionTypeId != value))
				{
					this.OnSubmissionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SubmissionTypeId = value;
					this.SendPropertyChanged("SubmissionTypeId");
					this.OnSubmissionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SubmissionType", Storage="_SubmissionType1", DbType="NVarChar(255)")]
		public string SubmissionType1
		{
			get
			{
				return this._SubmissionType1;
			}
			set
			{
				if ((this._SubmissionType1 != value))
				{
					this.OnSubmissionType1Changing(value);
					this.SendPropertyChanging();
					this._SubmissionType1 = value;
					this.SendPropertyChanged("SubmissionType1");
					this.OnSubmissionType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubmissionType_Submission", Storage="_Submissions", ThisKey="SubmissionTypeId", OtherKey="SubmissionTypeId")]
		public EntitySet<Submission> Submissions
		{
			get
			{
				return this._Submissions;
			}
			set
			{
				this._Submissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionType = this;
		}
		
		private void detach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.SubmissionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProtocolHistory")]
	public partial class ProtocolHistory
	{
		
		private int _ProtocolID;
		
		private string _Title;
		
		private string _SubTitle;
		
		private string _Protocol;
		
		private string _ProtocolHTML;
		
		private string _LookUpTable;
		
		private System.Nullable<int> _LookUpID;
		
		private System.Nullable<System.DateTime> _LoadedDate;
		
		private System.Nullable<int> _VersionID;
		
		public ProtocolHistory()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolID", DbType="Int NOT NULL")]
		public int ProtocolID
		{
			get
			{
				return this._ProtocolID;
			}
			set
			{
				if ((this._ProtocolID != value))
				{
					this._ProtocolID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTitle", DbType="NVarChar(500)")]
		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}
			set
			{
				if ((this._SubTitle != value))
				{
					this._SubTitle = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Protocol", DbType="NVarChar(MAX)")]
		public string Protocol
		{
			get
			{
				return this._Protocol;
			}
			set
			{
				if ((this._Protocol != value))
				{
					this._Protocol = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolHTML", DbType="NVarChar(MAX)")]
		public string ProtocolHTML
		{
			get
			{
				return this._ProtocolHTML;
			}
			set
			{
				if ((this._ProtocolHTML != value))
				{
					this._ProtocolHTML = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LookUpTable", DbType="NVarChar(100)")]
		public string LookUpTable
		{
			get
			{
				return this._LookUpTable;
			}
			set
			{
				if ((this._LookUpTable != value))
				{
					this._LookUpTable = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LookUpID", DbType="Int")]
		public System.Nullable<int> LookUpID
		{
			get
			{
				return this._LookUpID;
			}
			set
			{
				if ((this._LookUpID != value))
				{
					this._LookUpID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoadedDate
		{
			get
			{
				return this._LoadedDate;
			}
			set
			{
				if ((this._LoadedDate != value))
				{
					this._LoadedDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionID", DbType="Int")]
		public System.Nullable<int> VersionID
		{
			get
			{
				return this._VersionID;
			}
			set
			{
				if ((this._VersionID != value))
				{
					this._VersionID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProtocolVersionControl")]
	public partial class ProtocolVersionControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VersionID;
		
		private string _Version;
		
		private System.Nullable<System.DateTime> _ProtocolLoadedDate;
		
		private System.Nullable<int> _StatusID;
		
		private string _Note;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionIDChanging(int value);
    partial void OnVersionIDChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnProtocolLoadedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProtocolLoadedDateChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public ProtocolVersionControl()
		{
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VersionID
		{
			get
			{
				return this._VersionID;
			}
			set
			{
				if ((this._VersionID != value))
				{
					this.OnVersionIDChanging(value);
					this.SendPropertyChanging();
					this._VersionID = value;
					this.SendPropertyChanged("VersionID");
					this.OnVersionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarChar(50)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolLoadedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProtocolLoadedDate
		{
			get
			{
				return this._ProtocolLoadedDate;
			}
			set
			{
				if ((this._ProtocolLoadedDate != value))
				{
					this.OnProtocolLoadedDateChanging(value);
					this.SendPropertyChanging();
					this._ProtocolLoadedDate = value;
					this.SendPropertyChanged("ProtocolLoadedDate");
					this.OnProtocolLoadedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_ProtocolVersionControl", Storage="_Status", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.ProtocolVersionControls.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.ProtocolVersionControls.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private string _TeamCode;
		
		private System.Nullable<int> _TeamTypeID;
		
		private int _StatusID;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.Guid> _Createdby;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDateTime;
		
		private EntitySet<TeamUser> _TeamUsers;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntityRef<TeamType> _TeamType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnTeamCodeChanging(string value);
    partial void OnTeamCodeChanged();
    partial void OnTeamTypeIDChanging(System.Nullable<int> value);
    partial void OnTeamTypeIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnCreatedbyChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedbyChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateTimeChanged();
    #endregion
		
		public Team()
		{
			this._TeamUsers = new EntitySet<TeamUser>(new Action<TeamUser>(this.attach_TeamUsers), new Action<TeamUser>(this.detach_TeamUsers));
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._TeamType = default(EntityRef<TeamType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamCode", DbType="NVarChar(50)")]
		public string TeamCode
		{
			get
			{
				return this._TeamCode;
			}
			set
			{
				if ((this._TeamCode != value))
				{
					this.OnTeamCodeChanging(value);
					this.SendPropertyChanging();
					this._TeamCode = value;
					this.SendPropertyChanged("TeamCode");
					this.OnTeamCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamTypeID", DbType="Int")]
		public System.Nullable<int> TeamTypeID
		{
			get
			{
				return this._TeamTypeID;
			}
			set
			{
				if ((this._TeamTypeID != value))
				{
					if (this._TeamType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TeamTypeID = value;
					this.SendPropertyChanged("TeamTypeID");
					this.OnTeamTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Createdby", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Createdby
		{
			get
			{
				return this._Createdby;
			}
			set
			{
				if ((this._Createdby != value))
				{
					this.OnCreatedbyChanging(value);
					this.SendPropertyChanging();
					this._Createdby = value;
					this.SendPropertyChanged("Createdby");
					this.OnCreatedbyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDateTime
		{
			get
			{
				return this._UpdatedDateTime;
			}
			set
			{
				if ((this._UpdatedDateTime != value))
				{
					this.OnUpdatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDateTime = value;
					this.SendPropertyChanged("UpdatedDateTime");
					this.OnUpdatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamUser", Storage="_TeamUsers", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<TeamUser> TeamUsers
		{
			get
			{
				return this._TeamUsers;
			}
			set
			{
				this._TeamUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Evaluation", Storage="_Evaluations", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamType_Team", Storage="_TeamType", ThisKey="TeamTypeID", OtherKey="TeamTypeID", IsForeignKey=true)]
		public TeamType TeamType
		{
			get
			{
				return this._TeamType.Entity;
			}
			set
			{
				TeamType previousValue = this._TeamType.Entity;
				if (((previousValue != value) 
							|| (this._TeamType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamType.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._TeamType.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._TeamTypeID = value.TeamTypeID;
					}
					else
					{
						this._TeamTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TeamType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamUsers(TeamUser entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamUsers(TeamUser entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamType")]
	public partial class TeamType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamTypeID;
		
		private string _TeamType1;
		
		private EntitySet<Team> _Teams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamTypeIDChanging(int value);
    partial void OnTeamTypeIDChanged();
    partial void OnTeamType1Changing(string value);
    partial void OnTeamType1Changed();
    #endregion
		
		public TeamType()
		{
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamTypeID
		{
			get
			{
				return this._TeamTypeID;
			}
			set
			{
				if ((this._TeamTypeID != value))
				{
					this.OnTeamTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TeamTypeID = value;
					this.SendPropertyChanged("TeamTypeID");
					this.OnTeamTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TeamType", Storage="_TeamType1", DbType="NVarChar(10)")]
		public string TeamType1
		{
			get
			{
				return this._TeamType1;
			}
			set
			{
				if ((this._TeamType1 != value))
				{
					this.OnTeamType1Changing(value);
					this.SendPropertyChanging();
					this._TeamType1 = value;
					this.SendPropertyChanged("TeamType1");
					this.OnTeamType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamType_Team", Storage="_Teams", ThisKey="TeamTypeID", OtherKey="TeamTypeID")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.TeamType = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.TeamType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamUser")]
	public partial class TeamUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private System.Guid _UserId;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public TeamUser()
		{
			this._Team = default(EntityRef<Team>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamUser", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamUsers.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamUsers.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_TeamUser", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.TeamUsers.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.TeamUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evaluation")]
	public partial class Evaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvaluationId;
		
		private System.Nullable<System.Guid> _ConsensusStartedBy;
		
		private System.Nullable<int> _TeamID;
		
		private System.Nullable<int> _AbstractID;
		
		private bool _IsComplete;
		
		private System.Nullable<System.DateTime> _DateTimeStarted;
		
		private System.Nullable<System.DateTime> _DateTimeEnded;
		
		private System.Nullable<short> _EvaluationTypeId;
		
		private bool _IsStopped;
		
		private System.Nullable<System.Guid> _StoppedBy;
		
		private System.Nullable<System.DateTime> _StoppedDateTime;
		
		private EntitySet<AbstractStatusChangeHistory> _AbstractStatusChangeHistories;
		
		private EntitySet<AbstractStatusChangeHistory> _AbstractStatusChangeHistories1;
		
		private EntitySet<Submission> _Submissions;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<EvaluationType> _EvaluationType;
		
		private EntityRef<Abstract> _Abstract;
		
		private EntityRef<Abstract> _Abstract1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvaluationIdChanging(int value);
    partial void OnEvaluationIdChanged();
    partial void OnConsensusStartedByChanging(System.Nullable<System.Guid> value);
    partial void OnConsensusStartedByChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    partial void OnAbstractIDChanging(System.Nullable<int> value);
    partial void OnAbstractIDChanged();
    partial void OnIsCompleteChanging(bool value);
    partial void OnIsCompleteChanged();
    partial void OnDateTimeStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeStartedChanged();
    partial void OnDateTimeEndedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeEndedChanged();
    partial void OnEvaluationTypeIdChanging(System.Nullable<short> value);
    partial void OnEvaluationTypeIdChanged();
    partial void OnIsStoppedChanging(bool value);
    partial void OnIsStoppedChanged();
    partial void OnStoppedByChanging(System.Nullable<System.Guid> value);
    partial void OnStoppedByChanged();
    partial void OnStoppedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStoppedDateTimeChanged();
    #endregion
		
		public Evaluation()
		{
			this._AbstractStatusChangeHistories = new EntitySet<AbstractStatusChangeHistory>(new Action<AbstractStatusChangeHistory>(this.attach_AbstractStatusChangeHistories), new Action<AbstractStatusChangeHistory>(this.detach_AbstractStatusChangeHistories));
			this._AbstractStatusChangeHistories1 = new EntitySet<AbstractStatusChangeHistory>(new Action<AbstractStatusChangeHistory>(this.attach_AbstractStatusChangeHistories1), new Action<AbstractStatusChangeHistory>(this.detach_AbstractStatusChangeHistories1));
			this._Submissions = new EntitySet<Submission>(new Action<Submission>(this.attach_Submissions), new Action<Submission>(this.detach_Submissions));
			this._Team = default(EntityRef<Team>);
			this._EvaluationType = default(EntityRef<EvaluationType>);
			this._Abstract = default(EntityRef<Abstract>);
			this._Abstract1 = default(EntityRef<Abstract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EvaluationId
		{
			get
			{
				return this._EvaluationId;
			}
			set
			{
				if ((this._EvaluationId != value))
				{
					this.OnEvaluationIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluationId = value;
					this.SendPropertyChanged("EvaluationId");
					this.OnEvaluationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConsensusStartedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ConsensusStartedBy
		{
			get
			{
				return this._ConsensusStartedBy;
			}
			set
			{
				if ((this._ConsensusStartedBy != value))
				{
					this.OnConsensusStartedByChanging(value);
					this.SendPropertyChanging();
					this._ConsensusStartedBy = value;
					this.SendPropertyChanged("ConsensusStartedBy");
					this.OnConsensusStartedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int")]
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractID", DbType="Int")]
		public System.Nullable<int> AbstractID
		{
			get
			{
				return this._AbstractID;
			}
			set
			{
				if ((this._AbstractID != value))
				{
					if ((this._Abstract.HasLoadedOrAssignedValue || this._Abstract1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbstractIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractID = value;
					this.SendPropertyChanged("AbstractID");
					this.OnAbstractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsComplete", DbType="Bit NOT NULL")]
		public bool IsComplete
		{
			get
			{
				return this._IsComplete;
			}
			set
			{
				if ((this._IsComplete != value))
				{
					this.OnIsCompleteChanging(value);
					this.SendPropertyChanging();
					this._IsComplete = value;
					this.SendPropertyChanged("IsComplete");
					this.OnIsCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeStarted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTimeStarted
		{
			get
			{
				return this._DateTimeStarted;
			}
			set
			{
				if ((this._DateTimeStarted != value))
				{
					this.OnDateTimeStartedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeStarted = value;
					this.SendPropertyChanged("DateTimeStarted");
					this.OnDateTimeStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeEnded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTimeEnded
		{
			get
			{
				return this._DateTimeEnded;
			}
			set
			{
				if ((this._DateTimeEnded != value))
				{
					this.OnDateTimeEndedChanging(value);
					this.SendPropertyChanging();
					this._DateTimeEnded = value;
					this.SendPropertyChanged("DateTimeEnded");
					this.OnDateTimeEndedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationTypeId", DbType="SmallInt")]
		public System.Nullable<short> EvaluationTypeId
		{
			get
			{
				return this._EvaluationTypeId;
			}
			set
			{
				if ((this._EvaluationTypeId != value))
				{
					if (this._EvaluationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluationTypeId = value;
					this.SendPropertyChanged("EvaluationTypeId");
					this.OnEvaluationTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsStopped", DbType="Bit NOT NULL")]
		public bool IsStopped
		{
			get
			{
				return this._IsStopped;
			}
			set
			{
				if ((this._IsStopped != value))
				{
					this.OnIsStoppedChanging(value);
					this.SendPropertyChanging();
					this._IsStopped = value;
					this.SendPropertyChanged("IsStopped");
					this.OnIsStoppedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoppedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StoppedBy
		{
			get
			{
				return this._StoppedBy;
			}
			set
			{
				if ((this._StoppedBy != value))
				{
					this.OnStoppedByChanging(value);
					this.SendPropertyChanging();
					this._StoppedBy = value;
					this.SendPropertyChanged("StoppedBy");
					this.OnStoppedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoppedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StoppedDateTime
		{
			get
			{
				return this._StoppedDateTime;
			}
			set
			{
				if ((this._StoppedDateTime != value))
				{
					this.OnStoppedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StoppedDateTime = value;
					this.SendPropertyChanged("StoppedDateTime");
					this.OnStoppedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_AbstractStatusChangeHistory", Storage="_AbstractStatusChangeHistories", ThisKey="EvaluationId", OtherKey="EvaluationId")]
		public EntitySet<AbstractStatusChangeHistory> AbstractStatusChangeHistories
		{
			get
			{
				return this._AbstractStatusChangeHistories;
			}
			set
			{
				this._AbstractStatusChangeHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_AbstractStatusChangeHistory1", Storage="_AbstractStatusChangeHistories1", ThisKey="EvaluationId", OtherKey="EvaluationId")]
		public EntitySet<AbstractStatusChangeHistory> AbstractStatusChangeHistories1
		{
			get
			{
				return this._AbstractStatusChangeHistories1;
			}
			set
			{
				this._AbstractStatusChangeHistories1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_Submission", Storage="_Submissions", ThisKey="EvaluationId", OtherKey="EvaluationId")]
		public EntitySet<Submission> Submissions
		{
			get
			{
				return this._Submissions;
			}
			set
			{
				this._Submissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Evaluation", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EvaluationType_Evaluation", Storage="_EvaluationType", ThisKey="EvaluationTypeId", OtherKey="EvaluationTypeId", IsForeignKey=true)]
		public EvaluationType EvaluationType
		{
			get
			{
				return this._EvaluationType.Entity;
			}
			set
			{
				EvaluationType previousValue = this._EvaluationType.Entity;
				if (((previousValue != value) 
							|| (this._EvaluationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EvaluationType.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._EvaluationType.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._EvaluationTypeId = value.EvaluationTypeId;
					}
					else
					{
						this._EvaluationTypeId = default(Nullable<short>);
					}
					this.SendPropertyChanged("EvaluationType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_Evaluation", Storage="_Abstract", ThisKey="AbstractID", OtherKey="AbstractID", IsForeignKey=true)]
		public Abstract Abstract
		{
			get
			{
				return this._Abstract.Entity;
			}
			set
			{
				Abstract previousValue = this._Abstract.Entity;
				if (((previousValue != value) 
							|| (this._Abstract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abstract.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Abstract.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._AbstractID = value.AbstractID;
					}
					else
					{
						this._AbstractID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Abstract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_Evaluation1", Storage="_Abstract1", ThisKey="AbstractID", OtherKey="AbstractID", IsForeignKey=true)]
		public Abstract Abstract1
		{
			get
			{
				return this._Abstract1.Entity;
			}
			set
			{
				Abstract previousValue = this._Abstract1.Entity;
				if (((previousValue != value) 
							|| (this._Abstract1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abstract1.Entity = null;
						previousValue.Evaluations1.Remove(this);
					}
					this._Abstract1.Entity = value;
					if ((value != null))
					{
						value.Evaluations1.Add(this);
						this._AbstractID = value.AbstractID;
					}
					else
					{
						this._AbstractID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Abstract1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_AbstractStatusChangeHistories1(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation1 = this;
		}
		
		private void detach_AbstractStatusChangeHistories1(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation1 = null;
		}
		
		private void attach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_Submissions(Submission entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EvaluationType")]
	public partial class EvaluationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _EvaluationTypeId;
		
		private string _EvaluationType1;
		
		private EntitySet<Evaluation> _Evaluations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvaluationTypeIdChanging(short value);
    partial void OnEvaluationTypeIdChanged();
    partial void OnEvaluationType1Changing(string value);
    partial void OnEvaluationType1Changed();
    #endregion
		
		public EvaluationType()
		{
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationTypeId", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short EvaluationTypeId
		{
			get
			{
				return this._EvaluationTypeId;
			}
			set
			{
				if ((this._EvaluationTypeId != value))
				{
					this.OnEvaluationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluationTypeId = value;
					this.SendPropertyChanged("EvaluationTypeId");
					this.OnEvaluationTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EvaluationType", Storage="_EvaluationType1", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string EvaluationType1
		{
			get
			{
				return this._EvaluationType1;
			}
			set
			{
				if ((this._EvaluationType1 != value))
				{
					this.OnEvaluationType1Changing(value);
					this.SendPropertyChanging();
					this._EvaluationType1 = value;
					this.SendPropertyChanged("EvaluationType1");
					this.OnEvaluationType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EvaluationType_Evaluation", Storage="_Evaluations", ThisKey="EvaluationTypeId", OtherKey="EvaluationTypeId")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.EvaluationType = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.EvaluationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private string _UserFirstName;
		
		private string _UserLastName;
		
		private EntitySet<TeamUser> _TeamUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    partial void OnUserFirstNameChanging(string value);
    partial void OnUserFirstNameChanged();
    partial void OnUserLastNameChanging(string value);
    partial void OnUserLastNameChanged();
    #endregion
		
		public aspnet_User()
		{
			this._TeamUsers = new EntitySet<TeamUser>(new Action<TeamUser>(this.attach_TeamUsers), new Action<TeamUser>(this.detach_TeamUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFirstName", DbType="NVarChar(50)")]
		public string UserFirstName
		{
			get
			{
				return this._UserFirstName;
			}
			set
			{
				if ((this._UserFirstName != value))
				{
					this.OnUserFirstNameChanging(value);
					this.SendPropertyChanging();
					this._UserFirstName = value;
					this.SendPropertyChanged("UserFirstName");
					this.OnUserFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLastName", DbType="NVarChar(50)")]
		public string UserLastName
		{
			get
			{
				return this._UserLastName;
			}
			set
			{
				if ((this._UserLastName != value))
				{
					this.OnUserLastNameChanging(value);
					this.SendPropertyChanging();
					this._UserLastName = value;
					this.SendPropertyChanged("UserLastName");
					this.OnUserLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_TeamUser", Storage="_TeamUsers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<TeamUser> TeamUsers
		{
			get
			{
				return this._TeamUsers;
			}
			set
			{
				this._TeamUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamUsers(TeamUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_TeamUsers(TeamUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AbstractStatusChangeHistory")]
	public partial class AbstractStatusChangeHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractStatusChangeHistoryID;
		
		private int _AbstractID;
		
		private System.Nullable<int> _EvaluationId;
		
		private int _AbstractStatusID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.Guid> _CreatedBy;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<Evaluation> _Evaluation1;
		
		private EntityRef<AbstractStatus> _AbstractStatus;
		
		private EntityRef<Abstract> _Abstract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractStatusChangeHistoryIDChanging(int value);
    partial void OnAbstractStatusChangeHistoryIDChanged();
    partial void OnAbstractIDChanging(int value);
    partial void OnAbstractIDChanged();
    partial void OnEvaluationIdChanging(System.Nullable<int> value);
    partial void OnEvaluationIdChanged();
    partial void OnAbstractStatusIDChanging(int value);
    partial void OnAbstractStatusIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByChanged();
    #endregion
		
		public AbstractStatusChangeHistory()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._Evaluation1 = default(EntityRef<Evaluation>);
			this._AbstractStatus = default(EntityRef<AbstractStatus>);
			this._Abstract = default(EntityRef<Abstract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusChangeHistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbstractStatusChangeHistoryID
		{
			get
			{
				return this._AbstractStatusChangeHistoryID;
			}
			set
			{
				if ((this._AbstractStatusChangeHistoryID != value))
				{
					this.OnAbstractStatusChangeHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusChangeHistoryID = value;
					this.SendPropertyChanged("AbstractStatusChangeHistoryID");
					this.OnAbstractStatusChangeHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractID", DbType="Int NOT NULL")]
		public int AbstractID
		{
			get
			{
				return this._AbstractID;
			}
			set
			{
				if ((this._AbstractID != value))
				{
					if (this._Abstract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbstractIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractID = value;
					this.SendPropertyChanged("AbstractID");
					this.OnAbstractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationId", DbType="Int")]
		public System.Nullable<int> EvaluationId
		{
			get
			{
				return this._EvaluationId;
			}
			set
			{
				if ((this._EvaluationId != value))
				{
					if ((this._Evaluation.HasLoadedOrAssignedValue || this._Evaluation1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluationIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluationId = value;
					this.SendPropertyChanged("EvaluationId");
					this.OnEvaluationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusID", DbType="Int NOT NULL")]
		public int AbstractStatusID
		{
			get
			{
				return this._AbstractStatusID;
			}
			set
			{
				if ((this._AbstractStatusID != value))
				{
					if (this._AbstractStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbstractStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusID = value;
					this.SendPropertyChanged("AbstractStatusID");
					this.OnAbstractStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_AbstractStatusChangeHistory", Storage="_Evaluation", ThisKey="EvaluationId", OtherKey="EvaluationId", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.AbstractStatusChangeHistories.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.AbstractStatusChangeHistories.Add(this);
						this._EvaluationId = value.EvaluationId;
					}
					else
					{
						this._EvaluationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_AbstractStatusChangeHistory1", Storage="_Evaluation1", ThisKey="EvaluationId", OtherKey="EvaluationId", IsForeignKey=true)]
		public Evaluation Evaluation1
		{
			get
			{
				return this._Evaluation1.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation1.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation1.Entity = null;
						previousValue.AbstractStatusChangeHistories1.Remove(this);
					}
					this._Evaluation1.Entity = value;
					if ((value != null))
					{
						value.AbstractStatusChangeHistories1.Add(this);
						this._EvaluationId = value.EvaluationId;
					}
					else
					{
						this._EvaluationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Evaluation1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AbstractStatus_AbstractStatusChangeHistory", Storage="_AbstractStatus", ThisKey="AbstractStatusID", OtherKey="AbstractStatusID", IsForeignKey=true)]
		public AbstractStatus AbstractStatus
		{
			get
			{
				return this._AbstractStatus.Entity;
			}
			set
			{
				AbstractStatus previousValue = this._AbstractStatus.Entity;
				if (((previousValue != value) 
							|| (this._AbstractStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AbstractStatus.Entity = null;
						previousValue.AbstractStatusChangeHistories.Remove(this);
					}
					this._AbstractStatus.Entity = value;
					if ((value != null))
					{
						value.AbstractStatusChangeHistories.Add(this);
						this._AbstractStatusID = value.AbstractStatusID;
					}
					else
					{
						this._AbstractStatusID = default(int);
					}
					this.SendPropertyChanged("AbstractStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_AbstractStatusChangeHistory", Storage="_Abstract", ThisKey="AbstractID", OtherKey="AbstractID", IsForeignKey=true)]
		public Abstract Abstract
		{
			get
			{
				return this._Abstract.Entity;
			}
			set
			{
				Abstract previousValue = this._Abstract.Entity;
				if (((previousValue != value) 
							|| (this._Abstract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abstract.Entity = null;
						previousValue.AbstractStatusChangeHistories.Remove(this);
					}
					this._Abstract.Entity = value;
					if ((value != null))
					{
						value.AbstractStatusChangeHistories.Add(this);
						this._AbstractID = value.AbstractID;
					}
					else
					{
						this._AbstractID = default(int);
					}
					this.SendPropertyChanged("Abstract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AbstractStatus")]
	public partial class AbstractStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractStatusID;
		
		private string _AbstractStatusCode;
		
		private string _AbstractStatusDescription;
		
		private System.Nullable<int> _StatusID;
		
		private EntitySet<AbstractStatusChangeHistory> _AbstractStatusChangeHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractStatusIDChanging(int value);
    partial void OnAbstractStatusIDChanged();
    partial void OnAbstractStatusCodeChanging(string value);
    partial void OnAbstractStatusCodeChanged();
    partial void OnAbstractStatusDescriptionChanging(string value);
    partial void OnAbstractStatusDescriptionChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
		
		public AbstractStatus()
		{
			this._AbstractStatusChangeHistories = new EntitySet<AbstractStatusChangeHistory>(new Action<AbstractStatusChangeHistory>(this.attach_AbstractStatusChangeHistories), new Action<AbstractStatusChangeHistory>(this.detach_AbstractStatusChangeHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbstractStatusID
		{
			get
			{
				return this._AbstractStatusID;
			}
			set
			{
				if ((this._AbstractStatusID != value))
				{
					this.OnAbstractStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusID = value;
					this.SendPropertyChanged("AbstractStatusID");
					this.OnAbstractStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string AbstractStatusCode
		{
			get
			{
				return this._AbstractStatusCode;
			}
			set
			{
				if ((this._AbstractStatusCode != value))
				{
					this.OnAbstractStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusCode = value;
					this.SendPropertyChanged("AbstractStatusCode");
					this.OnAbstractStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusDescription", DbType="NVarChar(255)")]
		public string AbstractStatusDescription
		{
			get
			{
				return this._AbstractStatusDescription;
			}
			set
			{
				if ((this._AbstractStatusDescription != value))
				{
					this.OnAbstractStatusDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusDescription = value;
					this.SendPropertyChanged("AbstractStatusDescription");
					this.OnAbstractStatusDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AbstractStatus_AbstractStatusChangeHistory", Storage="_AbstractStatusChangeHistories", ThisKey="AbstractStatusID", OtherKey="AbstractStatusID")]
		public EntitySet<AbstractStatusChangeHistory> AbstractStatusChangeHistories
		{
			get
			{
				return this._AbstractStatusChangeHistories;
			}
			set
			{
				this._AbstractStatusChangeHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.AbstractStatus = this;
		}
		
		private void detach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.AbstractStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Abstract")]
	public partial class Abstract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractID;
		
		private string _AdministeringIC;
		
		private string _Abstract1;
		
		private string _AbstractDescPart;
		
		private string _AbstractPublicHeathPart;
		
		private string _AbstractNIHPart;
		
		private string _AbstractProjTermPart;
		
		private string _ProjectTitle;
		
		private System.Nullable<int> _ApplicationID;
		
		private string _Activity;
		
		private string _ProjectNumber;
		
		private System.Nullable<int> _Type;
		
		private string _IC;
		
		private System.Nullable<int> _SerialNumber;
		
		private System.Nullable<int> _SupportYear;
		
		private string _Suffix;
		
		private string _PIProjectLeader;
		
		private string _FY;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntitySet<Evaluation> _Evaluations1;
		
		private EntitySet<AbstractStatusChangeHistory> _AbstractStatusChangeHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractIDChanging(int value);
    partial void OnAbstractIDChanged();
    partial void OnAdministeringICChanging(string value);
    partial void OnAdministeringICChanged();
    partial void OnAbstract1Changing(string value);
    partial void OnAbstract1Changed();
    partial void OnAbstractDescPartChanging(string value);
    partial void OnAbstractDescPartChanged();
    partial void OnAbstractPublicHeathPartChanging(string value);
    partial void OnAbstractPublicHeathPartChanged();
    partial void OnAbstractNIHPartChanging(string value);
    partial void OnAbstractNIHPartChanged();
    partial void OnAbstractProjTermPartChanging(string value);
    partial void OnAbstractProjTermPartChanged();
    partial void OnProjectTitleChanging(string value);
    partial void OnProjectTitleChanged();
    partial void OnApplicationIDChanging(System.Nullable<int> value);
    partial void OnApplicationIDChanged();
    partial void OnActivityChanging(string value);
    partial void OnActivityChanged();
    partial void OnProjectNumberChanging(string value);
    partial void OnProjectNumberChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnICChanging(string value);
    partial void OnICChanged();
    partial void OnSerialNumberChanging(System.Nullable<int> value);
    partial void OnSerialNumberChanged();
    partial void OnSupportYearChanging(System.Nullable<int> value);
    partial void OnSupportYearChanged();
    partial void OnSuffixChanging(string value);
    partial void OnSuffixChanged();
    partial void OnPIProjectLeaderChanging(string value);
    partial void OnPIProjectLeaderChanged();
    partial void OnFYChanging(string value);
    partial void OnFYChanged();
    #endregion
		
		public Abstract()
		{
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Evaluations1 = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations1), new Action<Evaluation>(this.detach_Evaluations1));
			this._AbstractStatusChangeHistories = new EntitySet<AbstractStatusChangeHistory>(new Action<AbstractStatusChangeHistory>(this.attach_AbstractStatusChangeHistories), new Action<AbstractStatusChangeHistory>(this.detach_AbstractStatusChangeHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbstractID
		{
			get
			{
				return this._AbstractID;
			}
			set
			{
				if ((this._AbstractID != value))
				{
					this.OnAbstractIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractID = value;
					this.SendPropertyChanged("AbstractID");
					this.OnAbstractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministeringIC", DbType="NVarChar(20)")]
		public string AdministeringIC
		{
			get
			{
				return this._AdministeringIC;
			}
			set
			{
				if ((this._AdministeringIC != value))
				{
					this.OnAdministeringICChanging(value);
					this.SendPropertyChanging();
					this._AdministeringIC = value;
					this.SendPropertyChanged("AdministeringIC");
					this.OnAdministeringICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Abstract", Storage="_Abstract1", DbType="NVarChar(MAX)")]
		public string Abstract1
		{
			get
			{
				return this._Abstract1;
			}
			set
			{
				if ((this._Abstract1 != value))
				{
					this.OnAbstract1Changing(value);
					this.SendPropertyChanging();
					this._Abstract1 = value;
					this.SendPropertyChanged("Abstract1");
					this.OnAbstract1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractDescPart", DbType="NVarChar(MAX)")]
		public string AbstractDescPart
		{
			get
			{
				return this._AbstractDescPart;
			}
			set
			{
				if ((this._AbstractDescPart != value))
				{
					this.OnAbstractDescPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractDescPart = value;
					this.SendPropertyChanged("AbstractDescPart");
					this.OnAbstractDescPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractPublicHeathPart", DbType="NVarChar(MAX)")]
		public string AbstractPublicHeathPart
		{
			get
			{
				return this._AbstractPublicHeathPart;
			}
			set
			{
				if ((this._AbstractPublicHeathPart != value))
				{
					this.OnAbstractPublicHeathPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractPublicHeathPart = value;
					this.SendPropertyChanged("AbstractPublicHeathPart");
					this.OnAbstractPublicHeathPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractNIHPart", DbType="NVarChar(MAX)")]
		public string AbstractNIHPart
		{
			get
			{
				return this._AbstractNIHPart;
			}
			set
			{
				if ((this._AbstractNIHPart != value))
				{
					this.OnAbstractNIHPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractNIHPart = value;
					this.SendPropertyChanged("AbstractNIHPart");
					this.OnAbstractNIHPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractProjTermPart", DbType="NVarChar(MAX)")]
		public string AbstractProjTermPart
		{
			get
			{
				return this._AbstractProjTermPart;
			}
			set
			{
				if ((this._AbstractProjTermPart != value))
				{
					this.OnAbstractProjTermPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractProjTermPart = value;
					this.SendPropertyChanged("AbstractProjTermPart");
					this.OnAbstractProjTermPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ProjectTitle
		{
			get
			{
				return this._ProjectTitle;
			}
			set
			{
				if ((this._ProjectTitle != value))
				{
					this.OnProjectTitleChanging(value);
					this.SendPropertyChanging();
					this._ProjectTitle = value;
					this.SendPropertyChanged("ProjectTitle");
					this.OnProjectTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="Int")]
		public System.Nullable<int> ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activity", DbType="NVarChar(20)")]
		public string Activity
		{
			get
			{
				return this._Activity;
			}
			set
			{
				if ((this._Activity != value))
				{
					this.OnActivityChanging(value);
					this.SendPropertyChanging();
					this._Activity = value;
					this.SendPropertyChanged("Activity");
					this.OnActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectNumber", DbType="NVarChar(255)")]
		public string ProjectNumber
		{
			get
			{
				return this._ProjectNumber;
			}
			set
			{
				if ((this._ProjectNumber != value))
				{
					this.OnProjectNumberChanging(value);
					this.SendPropertyChanging();
					this._ProjectNumber = value;
					this.SendPropertyChanged("ProjectNumber");
					this.OnProjectNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IC", DbType="NVarChar(20)")]
		public string IC
		{
			get
			{
				return this._IC;
			}
			set
			{
				if ((this._IC != value))
				{
					this.OnICChanging(value);
					this.SendPropertyChanging();
					this._IC = value;
					this.SendPropertyChanged("IC");
					this.OnICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="Int")]
		public System.Nullable<int> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportYear", DbType="Int")]
		public System.Nullable<int> SupportYear
		{
			get
			{
				return this._SupportYear;
			}
			set
			{
				if ((this._SupportYear != value))
				{
					this.OnSupportYearChanging(value);
					this.SendPropertyChanging();
					this._SupportYear = value;
					this.SendPropertyChanged("SupportYear");
					this.OnSupportYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suffix", DbType="NVarChar(255)")]
		public string Suffix
		{
			get
			{
				return this._Suffix;
			}
			set
			{
				if ((this._Suffix != value))
				{
					this.OnSuffixChanging(value);
					this.SendPropertyChanging();
					this._Suffix = value;
					this.SendPropertyChanged("Suffix");
					this.OnSuffixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PIProjectLeader", DbType="NVarChar(255)")]
		public string PIProjectLeader
		{
			get
			{
				return this._PIProjectLeader;
			}
			set
			{
				if ((this._PIProjectLeader != value))
				{
					this.OnPIProjectLeaderChanging(value);
					this.SendPropertyChanging();
					this._PIProjectLeader = value;
					this.SendPropertyChanged("PIProjectLeader");
					this.OnPIProjectLeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FY", DbType="NVarChar(20)")]
		public string FY
		{
			get
			{
				return this._FY;
			}
			set
			{
				if ((this._FY != value))
				{
					this.OnFYChanging(value);
					this.SendPropertyChanging();
					this._FY = value;
					this.SendPropertyChanged("FY");
					this.OnFYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_Evaluation", Storage="_Evaluations", ThisKey="AbstractID", OtherKey="AbstractID")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_Evaluation1", Storage="_Evaluations1", ThisKey="AbstractID", OtherKey="AbstractID")]
		public EntitySet<Evaluation> Evaluations1
		{
			get
			{
				return this._Evaluations1;
			}
			set
			{
				this._Evaluations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_AbstractStatusChangeHistory", Storage="_AbstractStatusChangeHistories", ThisKey="AbstractID", OtherKey="AbstractID")]
		public EntitySet<AbstractStatusChangeHistory> AbstractStatusChangeHistories
		{
			get
			{
				return this._AbstractStatusChangeHistories;
			}
			set
			{
				this._AbstractStatusChangeHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = null;
		}
		
		private void attach_Evaluations1(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Abstract1 = this;
		}
		
		private void detach_Evaluations1(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Abstract1 = null;
		}
		
		private void attach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = this;
		}
		
		private void detach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Submission")]
	public partial class Submission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubmissionID;
		
		private System.Nullable<int> _EvaluationId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<short> _SubmissionTypeId;
		
		private string _Comments;
		
		private bool _UnableToCode;
		
		private System.Nullable<System.Guid> _ApproveSupervisorUserID;
		
		private System.Nullable<System.DateTime> _SubmissionDateTime;
		
		private System.Nullable<int> _StatusID;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<A_StudyFocusAnswer> _A_StudyFocusAnswers;
		
		private EntitySet<B_EntitiesStudiedAnswer> _B_EntitiesStudiedAnswers;
		
		private EntitySet<C_StudySettingAnswer> _C_StudySettingAnswers;
		
		private EntitySet<D_PopulationFocusAnswer> _D_PopulationFocusAnswers;
		
		private EntitySet<E_StudyDesignPurposeAnswer> _E_StudyDesignPurposeAnswers;
		
		private EntitySet<F_PreventionCategoryAnswer> _F_PreventionCategoryAnswers;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<Status> _Status;
		
		private EntityRef<Status> _Status1;
		
		private EntityRef<SubmissionType> _SubmissionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubmissionIDChanging(int value);
    partial void OnSubmissionIDChanged();
    partial void OnEvaluationIdChanging(System.Nullable<int> value);
    partial void OnEvaluationIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnSubmissionTypeIdChanging(System.Nullable<short> value);
    partial void OnSubmissionTypeIdChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnUnableToCodeChanging(bool value);
    partial void OnUnableToCodeChanged();
    partial void OnApproveSupervisorUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnApproveSupervisorUserIDChanged();
    partial void OnSubmissionDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmissionDateTimeChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Submission()
		{
			this._A_StudyFocusAnswers = new EntitySet<A_StudyFocusAnswer>(new Action<A_StudyFocusAnswer>(this.attach_A_StudyFocusAnswers), new Action<A_StudyFocusAnswer>(this.detach_A_StudyFocusAnswers));
			this._B_EntitiesStudiedAnswers = new EntitySet<B_EntitiesStudiedAnswer>(new Action<B_EntitiesStudiedAnswer>(this.attach_B_EntitiesStudiedAnswers), new Action<B_EntitiesStudiedAnswer>(this.detach_B_EntitiesStudiedAnswers));
			this._C_StudySettingAnswers = new EntitySet<C_StudySettingAnswer>(new Action<C_StudySettingAnswer>(this.attach_C_StudySettingAnswers), new Action<C_StudySettingAnswer>(this.detach_C_StudySettingAnswers));
			this._D_PopulationFocusAnswers = new EntitySet<D_PopulationFocusAnswer>(new Action<D_PopulationFocusAnswer>(this.attach_D_PopulationFocusAnswers), new Action<D_PopulationFocusAnswer>(this.detach_D_PopulationFocusAnswers));
			this._E_StudyDesignPurposeAnswers = new EntitySet<E_StudyDesignPurposeAnswer>(new Action<E_StudyDesignPurposeAnswer>(this.attach_E_StudyDesignPurposeAnswers), new Action<E_StudyDesignPurposeAnswer>(this.detach_E_StudyDesignPurposeAnswers));
			this._F_PreventionCategoryAnswers = new EntitySet<F_PreventionCategoryAnswer>(new Action<F_PreventionCategoryAnswer>(this.attach_F_PreventionCategoryAnswers), new Action<F_PreventionCategoryAnswer>(this.detach_F_PreventionCategoryAnswers));
			this._Evaluation = default(EntityRef<Evaluation>);
			this._Status = default(EntityRef<Status>);
			this._Status1 = default(EntityRef<Status>);
			this._SubmissionType = default(EntityRef<SubmissionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubmissionID
		{
			get
			{
				return this._SubmissionID;
			}
			set
			{
				if ((this._SubmissionID != value))
				{
					this.OnSubmissionIDChanging(value);
					this.SendPropertyChanging();
					this._SubmissionID = value;
					this.SendPropertyChanged("SubmissionID");
					this.OnSubmissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationId", DbType="Int")]
		public System.Nullable<int> EvaluationId
		{
			get
			{
				return this._EvaluationId;
			}
			set
			{
				if ((this._EvaluationId != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvaluationIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluationId = value;
					this.SendPropertyChanged("EvaluationId");
					this.OnEvaluationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionTypeId", DbType="SmallInt")]
		public System.Nullable<short> SubmissionTypeId
		{
			get
			{
				return this._SubmissionTypeId;
			}
			set
			{
				if ((this._SubmissionTypeId != value))
				{
					if (this._SubmissionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmissionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SubmissionTypeId = value;
					this.SendPropertyChanged("SubmissionTypeId");
					this.OnSubmissionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnableToCode", DbType="Bit NOT NULL")]
		public bool UnableToCode
		{
			get
			{
				return this._UnableToCode;
			}
			set
			{
				if ((this._UnableToCode != value))
				{
					this.OnUnableToCodeChanging(value);
					this.SendPropertyChanging();
					this._UnableToCode = value;
					this.SendPropertyChanged("UnableToCode");
					this.OnUnableToCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveSupervisorUserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ApproveSupervisorUserID
		{
			get
			{
				return this._ApproveSupervisorUserID;
			}
			set
			{
				if ((this._ApproveSupervisorUserID != value))
				{
					this.OnApproveSupervisorUserIDChanging(value);
					this.SendPropertyChanging();
					this._ApproveSupervisorUserID = value;
					this.SendPropertyChanged("ApproveSupervisorUserID");
					this.OnApproveSupervisorUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SubmissionDateTime
		{
			get
			{
				return this._SubmissionDateTime;
			}
			set
			{
				if ((this._SubmissionDateTime != value))
				{
					this.OnSubmissionDateTimeChanging(value);
					this.SendPropertyChanging();
					this._SubmissionDateTime = value;
					this.SendPropertyChanged("SubmissionDateTime");
					this.OnSubmissionDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if ((this._Status.HasLoadedOrAssignedValue || this._Status1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_A_StudyFocusAnswer", Storage="_A_StudyFocusAnswers", ThisKey="SubmissionID", OtherKey="SubmissionID")]
		public EntitySet<A_StudyFocusAnswer> A_StudyFocusAnswers
		{
			get
			{
				return this._A_StudyFocusAnswers;
			}
			set
			{
				this._A_StudyFocusAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_B_EntitiesStudiedAnswer", Storage="_B_EntitiesStudiedAnswers", ThisKey="SubmissionID", OtherKey="SubmissionID")]
		public EntitySet<B_EntitiesStudiedAnswer> B_EntitiesStudiedAnswers
		{
			get
			{
				return this._B_EntitiesStudiedAnswers;
			}
			set
			{
				this._B_EntitiesStudiedAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_C_StudySettingAnswer", Storage="_C_StudySettingAnswers", ThisKey="SubmissionID", OtherKey="SubmissionID")]
		public EntitySet<C_StudySettingAnswer> C_StudySettingAnswers
		{
			get
			{
				return this._C_StudySettingAnswers;
			}
			set
			{
				this._C_StudySettingAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_D_PopulationFocusAnswer", Storage="_D_PopulationFocusAnswers", ThisKey="SubmissionID", OtherKey="SubmissionID")]
		public EntitySet<D_PopulationFocusAnswer> D_PopulationFocusAnswers
		{
			get
			{
				return this._D_PopulationFocusAnswers;
			}
			set
			{
				this._D_PopulationFocusAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_E_StudyDesignPurposeAnswer", Storage="_E_StudyDesignPurposeAnswers", ThisKey="SubmissionID", OtherKey="SubmissionID")]
		public EntitySet<E_StudyDesignPurposeAnswer> E_StudyDesignPurposeAnswers
		{
			get
			{
				return this._E_StudyDesignPurposeAnswers;
			}
			set
			{
				this._E_StudyDesignPurposeAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Submission_F_PreventionCategoryAnswer", Storage="_F_PreventionCategoryAnswers", ThisKey="SubmissionID", OtherKey="SubmissionID")]
		public EntitySet<F_PreventionCategoryAnswer> F_PreventionCategoryAnswers
		{
			get
			{
				return this._F_PreventionCategoryAnswers;
			}
			set
			{
				this._F_PreventionCategoryAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_Submission", Storage="_Evaluation", ThisKey="EvaluationId", OtherKey="EvaluationId", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.Submissions.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.Submissions.Add(this);
						this._EvaluationId = value.EvaluationId;
					}
					else
					{
						this._EvaluationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Submission", Storage="_Status", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.Submissions.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.Submissions.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Submission1", Storage="_Status1", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public Status Status1
		{
			get
			{
				return this._Status1.Entity;
			}
			set
			{
				Status previousValue = this._Status1.Entity;
				if (((previousValue != value) 
							|| (this._Status1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status1.Entity = null;
						previousValue.Submissions1.Remove(this);
					}
					this._Status1.Entity = value;
					if ((value != null))
					{
						value.Submissions1.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubmissionType_Submission", Storage="_SubmissionType", ThisKey="SubmissionTypeId", OtherKey="SubmissionTypeId", IsForeignKey=true)]
		public SubmissionType SubmissionType
		{
			get
			{
				return this._SubmissionType.Entity;
			}
			set
			{
				SubmissionType previousValue = this._SubmissionType.Entity;
				if (((previousValue != value) 
							|| (this._SubmissionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubmissionType.Entity = null;
						previousValue.Submissions.Remove(this);
					}
					this._SubmissionType.Entity = value;
					if ((value != null))
					{
						value.Submissions.Add(this);
						this._SubmissionTypeId = value.SubmissionTypeId;
					}
					else
					{
						this._SubmissionTypeId = default(Nullable<short>);
					}
					this.SendPropertyChanged("SubmissionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_A_StudyFocusAnswers(A_StudyFocusAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = this;
		}
		
		private void detach_A_StudyFocusAnswers(A_StudyFocusAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = null;
		}
		
		private void attach_B_EntitiesStudiedAnswers(B_EntitiesStudiedAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = this;
		}
		
		private void detach_B_EntitiesStudiedAnswers(B_EntitiesStudiedAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = null;
		}
		
		private void attach_C_StudySettingAnswers(C_StudySettingAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = this;
		}
		
		private void detach_C_StudySettingAnswers(C_StudySettingAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = null;
		}
		
		private void attach_D_PopulationFocusAnswers(D_PopulationFocusAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = this;
		}
		
		private void detach_D_PopulationFocusAnswers(D_PopulationFocusAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = null;
		}
		
		private void attach_E_StudyDesignPurposeAnswers(E_StudyDesignPurposeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = this;
		}
		
		private void detach_E_StudyDesignPurposeAnswers(E_StudyDesignPurposeAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = null;
		}
		
		private void attach_F_PreventionCategoryAnswers(F_PreventionCategoryAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = this;
		}
		
		private void detach_F_PreventionCategoryAnswers(F_PreventionCategoryAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Submission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.A_StudyFocus")]
	public partial class A_StudyFocus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudyFocusID;
		
		private string _StudyFocus;
		
		private bool _A1_IsEnabled;
		
		private bool _A2_IsEnabled;
		
		private bool _A3_IsEnabled;
		
		private System.Nullable<int> _Sort;
		
		private System.Nullable<int> _StatusID;
		
		private EntitySet<A_StudyFocusAnswer> _A_StudyFocusAnswers;
		
		private EntityRef<Status> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudyFocusIDChanging(int value);
    partial void OnStudyFocusIDChanged();
    partial void OnStudyFocusChanging(string value);
    partial void OnStudyFocusChanged();
    partial void OnA1_IsEnabledChanging(bool value);
    partial void OnA1_IsEnabledChanged();
    partial void OnA2_IsEnabledChanging(bool value);
    partial void OnA2_IsEnabledChanged();
    partial void OnA3_IsEnabledChanging(bool value);
    partial void OnA3_IsEnabledChanged();
    partial void OnSortChanging(System.Nullable<int> value);
    partial void OnSortChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
		
		public A_StudyFocus()
		{
			this._A_StudyFocusAnswers = new EntitySet<A_StudyFocusAnswer>(new Action<A_StudyFocusAnswer>(this.attach_A_StudyFocusAnswers), new Action<A_StudyFocusAnswer>(this.detach_A_StudyFocusAnswers));
			this._Status = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyFocusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudyFocusID
		{
			get
			{
				return this._StudyFocusID;
			}
			set
			{
				if ((this._StudyFocusID != value))
				{
					this.OnStudyFocusIDChanging(value);
					this.SendPropertyChanging();
					this._StudyFocusID = value;
					this.SendPropertyChanged("StudyFocusID");
					this.OnStudyFocusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyFocus", DbType="NVarChar(255)")]
		public string StudyFocus
		{
			get
			{
				return this._StudyFocus;
			}
			set
			{
				if ((this._StudyFocus != value))
				{
					this.OnStudyFocusChanging(value);
					this.SendPropertyChanging();
					this._StudyFocus = value;
					this.SendPropertyChanged("StudyFocus");
					this.OnStudyFocusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A1_IsEnabled", DbType="Bit NOT NULL")]
		public bool A1_IsEnabled
		{
			get
			{
				return this._A1_IsEnabled;
			}
			set
			{
				if ((this._A1_IsEnabled != value))
				{
					this.OnA1_IsEnabledChanging(value);
					this.SendPropertyChanging();
					this._A1_IsEnabled = value;
					this.SendPropertyChanged("A1_IsEnabled");
					this.OnA1_IsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A2_IsEnabled", DbType="Bit NOT NULL")]
		public bool A2_IsEnabled
		{
			get
			{
				return this._A2_IsEnabled;
			}
			set
			{
				if ((this._A2_IsEnabled != value))
				{
					this.OnA2_IsEnabledChanging(value);
					this.SendPropertyChanging();
					this._A2_IsEnabled = value;
					this.SendPropertyChanged("A2_IsEnabled");
					this.OnA2_IsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A3_IsEnabled", DbType="Bit NOT NULL")]
		public bool A3_IsEnabled
		{
			get
			{
				return this._A3_IsEnabled;
			}
			set
			{
				if ((this._A3_IsEnabled != value))
				{
					this.OnA3_IsEnabledChanging(value);
					this.SendPropertyChanging();
					this._A3_IsEnabled = value;
					this.SendPropertyChanged("A3_IsEnabled");
					this.OnA3_IsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sort", DbType="Int")]
		public System.Nullable<int> Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._Status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="A_StudyFocus_A_StudyFocusAnswer", Storage="_A_StudyFocusAnswers", ThisKey="StudyFocusID", OtherKey="StudyFocusID")]
		public EntitySet<A_StudyFocusAnswer> A_StudyFocusAnswers
		{
			get
			{
				return this._A_StudyFocusAnswers;
			}
			set
			{
				this._A_StudyFocusAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_A_StudyFocus", Storage="_Status", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public Status Status
		{
			get
			{
				return this._Status.Entity;
			}
			set
			{
				Status previousValue = this._Status.Entity;
				if (((previousValue != value) 
							|| (this._Status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status.Entity = null;
						previousValue.A_StudyFocus.Remove(this);
					}
					this._Status.Entity = value;
					if ((value != null))
					{
						value.A_StudyFocus.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_A_StudyFocusAnswers(A_StudyFocusAnswer entity)
		{
			this.SendPropertyChanging();
			entity.A_StudyFocus = this;
		}
		
		private void detach_A_StudyFocusAnswers(A_StudyFocusAnswer entity)
		{
			this.SendPropertyChanging();
			entity.A_StudyFocus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Protocol")]
	public partial class Protocol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProtocolID;
		
		private string _Title;
		
		private string _SubTitle;
		
		private string _Protocol1;
		
		private string _ProtocolLoad;
		
		private string _LookUpTable;
		
		private System.Nullable<int> _LookUpID;
		
		private System.Nullable<System.DateTime> _LoadedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProtocolIDChanging(int value);
    partial void OnProtocolIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSubTitleChanging(string value);
    partial void OnSubTitleChanged();
    partial void OnProtocol1Changing(string value);
    partial void OnProtocol1Changed();
    partial void OnProtocolLoadChanging(string value);
    partial void OnProtocolLoadChanged();
    partial void OnLookUpTableChanging(string value);
    partial void OnLookUpTableChanged();
    partial void OnLookUpIDChanging(System.Nullable<int> value);
    partial void OnLookUpIDChanged();
    partial void OnLoadedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLoadedDateChanged();
    #endregion
		
		public Protocol()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProtocolID
		{
			get
			{
				return this._ProtocolID;
			}
			set
			{
				if ((this._ProtocolID != value))
				{
					this.OnProtocolIDChanging(value);
					this.SendPropertyChanging();
					this._ProtocolID = value;
					this.SendPropertyChanged("ProtocolID");
					this.OnProtocolIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTitle", DbType="NVarChar(1000)")]
		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}
			set
			{
				if ((this._SubTitle != value))
				{
					this.OnSubTitleChanging(value);
					this.SendPropertyChanging();
					this._SubTitle = value;
					this.SendPropertyChanged("SubTitle");
					this.OnSubTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Protocol", Storage="_Protocol1", DbType="NVarChar(MAX)")]
		public string Protocol1
		{
			get
			{
				return this._Protocol1;
			}
			set
			{
				if ((this._Protocol1 != value))
				{
					this.OnProtocol1Changing(value);
					this.SendPropertyChanging();
					this._Protocol1 = value;
					this.SendPropertyChanged("Protocol1");
					this.OnProtocol1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProtocolLoad", DbType="NVarChar(MAX)")]
		public string ProtocolLoad
		{
			get
			{
				return this._ProtocolLoad;
			}
			set
			{
				if ((this._ProtocolLoad != value))
				{
					this.OnProtocolLoadChanging(value);
					this.SendPropertyChanging();
					this._ProtocolLoad = value;
					this.SendPropertyChanged("ProtocolLoad");
					this.OnProtocolLoadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LookUpTable", DbType="NVarChar(100)")]
		public string LookUpTable
		{
			get
			{
				return this._LookUpTable;
			}
			set
			{
				if ((this._LookUpTable != value))
				{
					this.OnLookUpTableChanging(value);
					this.SendPropertyChanging();
					this._LookUpTable = value;
					this.SendPropertyChanged("LookUpTable");
					this.OnLookUpTableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LookUpID", DbType="Int")]
		public System.Nullable<int> LookUpID
		{
			get
			{
				return this._LookUpID;
			}
			set
			{
				if ((this._LookUpID != value))
				{
					this.OnLookUpIDChanging(value);
					this.SendPropertyChanging();
					this._LookUpID = value;
					this.SendPropertyChanged("LookUpID");
					this.OnLookUpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoadedDate
		{
			get
			{
				return this._LoadedDate;
			}
			set
			{
				if ((this._LoadedDate != value))
				{
					this.OnLoadedDateChanging(value);
					this.SendPropertyChanging();
					this._LoadedDate = value;
					this.SendPropertyChanged("LoadedDate");
					this.OnLoadedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
