#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ODPTaxonomyDAL_JY
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ODP_Taxonomy_DEV")]
	public partial class DataJYDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAbstract(Abstract instance);
    partial void UpdateAbstract(Abstract instance);
    partial void DeleteAbstract(Abstract instance);
    partial void InsertAbstractStatusChangeHistory(AbstractStatusChangeHistory instance);
    partial void UpdateAbstractStatusChangeHistory(AbstractStatusChangeHistory instance);
    partial void DeleteAbstractStatusChangeHistory(AbstractStatusChangeHistory instance);
    partial void InsertAbstractStatus(AbstractStatus instance);
    partial void UpdateAbstractStatus(AbstractStatus instance);
    partial void DeleteAbstractStatus(AbstractStatus instance);
    #endregion
		
		public DataJYDataContext() : 
				base(global::ODPTaxonomyDAL_JY.Properties.Settings.Default.ODP_Taxonomy_DEVConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataJYDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataJYDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataJYDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataJYDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Abstract> Abstracts
		{
			get
			{
				return this.GetTable<Abstract>();
			}
		}
		
		public System.Data.Linq.Table<AbstractStatusChangeHistory> AbstractStatusChangeHistories
		{
			get
			{
				return this.GetTable<AbstractStatusChangeHistory>();
			}
		}
		
		public System.Data.Linq.Table<AbstractStatus> AbstractStatus
		{
			get
			{
				return this.GetTable<AbstractStatus>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Abstract")]
	public partial class Abstract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractID;
		
		private string _AdministeringIC;
		
		private string _Abstract1;
		
		private string _AbstractDescPart;
		
		private string _AbstractPublicHeathPart;
		
		private string _AbstractNIHPart;
		
		private string _AbstractProjTeamPart;
		
		private string _ProjectTitle;
		
		private System.Nullable<int> _ApplicationID;
		
		private string _Activity;
		
		private string _ProjectNumber;
		
		private System.Nullable<int> _Type;
		
		private string _IC;
		
		private System.Nullable<int> _SerialNumber;
		
		private System.Nullable<int> _SupportYear;
		
		private string _Suffix;
		
		private string _PIProjectLeader;
		
		private string _FY;
		
		private EntitySet<AbstractStatusChangeHistory> _AbstractStatusChangeHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractIDChanging(int value);
    partial void OnAbstractIDChanged();
    partial void OnAdministeringICChanging(string value);
    partial void OnAdministeringICChanged();
    partial void OnAbstract1Changing(string value);
    partial void OnAbstract1Changed();
    partial void OnAbstractDescPartChanging(string value);
    partial void OnAbstractDescPartChanged();
    partial void OnAbstractPublicHeathPartChanging(string value);
    partial void OnAbstractPublicHeathPartChanged();
    partial void OnAbstractNIHPartChanging(string value);
    partial void OnAbstractNIHPartChanged();
    partial void OnAbstractProjTeamPartChanging(string value);
    partial void OnAbstractProjTeamPartChanged();
    partial void OnProjectTitleChanging(string value);
    partial void OnProjectTitleChanged();
    partial void OnApplicationIDChanging(System.Nullable<int> value);
    partial void OnApplicationIDChanged();
    partial void OnActivityChanging(string value);
    partial void OnActivityChanged();
    partial void OnProjectNumberChanging(string value);
    partial void OnProjectNumberChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnICChanging(string value);
    partial void OnICChanged();
    partial void OnSerialNumberChanging(System.Nullable<int> value);
    partial void OnSerialNumberChanged();
    partial void OnSupportYearChanging(System.Nullable<int> value);
    partial void OnSupportYearChanged();
    partial void OnSuffixChanging(string value);
    partial void OnSuffixChanged();
    partial void OnPIProjectLeaderChanging(string value);
    partial void OnPIProjectLeaderChanged();
    partial void OnFYChanging(string value);
    partial void OnFYChanged();
    #endregion
		
		public Abstract()
		{
			this._AbstractStatusChangeHistories = new EntitySet<AbstractStatusChangeHistory>(new Action<AbstractStatusChangeHistory>(this.attach_AbstractStatusChangeHistories), new Action<AbstractStatusChangeHistory>(this.detach_AbstractStatusChangeHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbstractID
		{
			get
			{
				return this._AbstractID;
			}
			set
			{
				if ((this._AbstractID != value))
				{
					this.OnAbstractIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractID = value;
					this.SendPropertyChanged("AbstractID");
					this.OnAbstractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministeringIC", DbType="NVarChar(20)")]
		public string AdministeringIC
		{
			get
			{
				return this._AdministeringIC;
			}
			set
			{
				if ((this._AdministeringIC != value))
				{
					this.OnAdministeringICChanging(value);
					this.SendPropertyChanging();
					this._AdministeringIC = value;
					this.SendPropertyChanged("AdministeringIC");
					this.OnAdministeringICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Abstract", Storage="_Abstract1", DbType="NVarChar(MAX)")]
		public string Abstract1
		{
			get
			{
				return this._Abstract1;
			}
			set
			{
				if ((this._Abstract1 != value))
				{
					this.OnAbstract1Changing(value);
					this.SendPropertyChanging();
					this._Abstract1 = value;
					this.SendPropertyChanged("Abstract1");
					this.OnAbstract1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractDescPart", DbType="NVarChar(MAX)")]
		public string AbstractDescPart
		{
			get
			{
				return this._AbstractDescPart;
			}
			set
			{
				if ((this._AbstractDescPart != value))
				{
					this.OnAbstractDescPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractDescPart = value;
					this.SendPropertyChanged("AbstractDescPart");
					this.OnAbstractDescPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractPublicHeathPart", DbType="NVarChar(MAX)")]
		public string AbstractPublicHeathPart
		{
			get
			{
				return this._AbstractPublicHeathPart;
			}
			set
			{
				if ((this._AbstractPublicHeathPart != value))
				{
					this.OnAbstractPublicHeathPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractPublicHeathPart = value;
					this.SendPropertyChanged("AbstractPublicHeathPart");
					this.OnAbstractPublicHeathPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractNIHPart", DbType="NVarChar(MAX)")]
		public string AbstractNIHPart
		{
			get
			{
				return this._AbstractNIHPart;
			}
			set
			{
				if ((this._AbstractNIHPart != value))
				{
					this.OnAbstractNIHPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractNIHPart = value;
					this.SendPropertyChanged("AbstractNIHPart");
					this.OnAbstractNIHPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractProjTeamPart", DbType="NVarChar(MAX)")]
		public string AbstractProjTeamPart
		{
			get
			{
				return this._AbstractProjTeamPart;
			}
			set
			{
				if ((this._AbstractProjTeamPart != value))
				{
					this.OnAbstractProjTeamPartChanging(value);
					this.SendPropertyChanging();
					this._AbstractProjTeamPart = value;
					this.SendPropertyChanged("AbstractProjTeamPart");
					this.OnAbstractProjTeamPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ProjectTitle
		{
			get
			{
				return this._ProjectTitle;
			}
			set
			{
				if ((this._ProjectTitle != value))
				{
					this.OnProjectTitleChanging(value);
					this.SendPropertyChanging();
					this._ProjectTitle = value;
					this.SendPropertyChanged("ProjectTitle");
					this.OnProjectTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="Int")]
		public System.Nullable<int> ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activity", DbType="NVarChar(20)")]
		public string Activity
		{
			get
			{
				return this._Activity;
			}
			set
			{
				if ((this._Activity != value))
				{
					this.OnActivityChanging(value);
					this.SendPropertyChanging();
					this._Activity = value;
					this.SendPropertyChanged("Activity");
					this.OnActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectNumber", DbType="NVarChar(255)")]
		public string ProjectNumber
		{
			get
			{
				return this._ProjectNumber;
			}
			set
			{
				if ((this._ProjectNumber != value))
				{
					this.OnProjectNumberChanging(value);
					this.SendPropertyChanging();
					this._ProjectNumber = value;
					this.SendPropertyChanged("ProjectNumber");
					this.OnProjectNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IC", DbType="NVarChar(20)")]
		public string IC
		{
			get
			{
				return this._IC;
			}
			set
			{
				if ((this._IC != value))
				{
					this.OnICChanging(value);
					this.SendPropertyChanging();
					this._IC = value;
					this.SendPropertyChanged("IC");
					this.OnICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="Int")]
		public System.Nullable<int> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportYear", DbType="Int")]
		public System.Nullable<int> SupportYear
		{
			get
			{
				return this._SupportYear;
			}
			set
			{
				if ((this._SupportYear != value))
				{
					this.OnSupportYearChanging(value);
					this.SendPropertyChanging();
					this._SupportYear = value;
					this.SendPropertyChanged("SupportYear");
					this.OnSupportYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suffix", DbType="NVarChar(255)")]
		public string Suffix
		{
			get
			{
				return this._Suffix;
			}
			set
			{
				if ((this._Suffix != value))
				{
					this.OnSuffixChanging(value);
					this.SendPropertyChanging();
					this._Suffix = value;
					this.SendPropertyChanged("Suffix");
					this.OnSuffixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PIProjectLeader", DbType="NVarChar(255)")]
		public string PIProjectLeader
		{
			get
			{
				return this._PIProjectLeader;
			}
			set
			{
				if ((this._PIProjectLeader != value))
				{
					this.OnPIProjectLeaderChanging(value);
					this.SendPropertyChanging();
					this._PIProjectLeader = value;
					this.SendPropertyChanged("PIProjectLeader");
					this.OnPIProjectLeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FY", DbType="NVarChar(20)")]
		public string FY
		{
			get
			{
				return this._FY;
			}
			set
			{
				if ((this._FY != value))
				{
					this.OnFYChanging(value);
					this.SendPropertyChanging();
					this._FY = value;
					this.SendPropertyChanged("FY");
					this.OnFYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_AbstractStatusChangeHistory", Storage="_AbstractStatusChangeHistories", ThisKey="AbstractID", OtherKey="AbstractID")]
		public EntitySet<AbstractStatusChangeHistory> AbstractStatusChangeHistories
		{
			get
			{
				return this._AbstractStatusChangeHistories;
			}
			set
			{
				this._AbstractStatusChangeHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = this;
		}
		
		private void detach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.Abstract = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AbstractStatusChangeHistory")]
	public partial class AbstractStatusChangeHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractStatusChangeHistoryID;
		
		private int _AbstractID;
		
		private System.Nullable<int> _EvaluationId;
		
		private int _AbstractStatusID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.Guid> _CreatedBy;
		
		private EntityRef<Abstract> _Abstract;
		
		private EntityRef<AbstractStatus> _AbstractStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractStatusChangeHistoryIDChanging(int value);
    partial void OnAbstractStatusChangeHistoryIDChanged();
    partial void OnAbstractIDChanging(int value);
    partial void OnAbstractIDChanged();
    partial void OnEvaluationIdChanging(System.Nullable<int> value);
    partial void OnEvaluationIdChanged();
    partial void OnAbstractStatusIDChanging(int value);
    partial void OnAbstractStatusIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByChanged();
    #endregion
		
		public AbstractStatusChangeHistory()
		{
			this._Abstract = default(EntityRef<Abstract>);
			this._AbstractStatus = default(EntityRef<AbstractStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusChangeHistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbstractStatusChangeHistoryID
		{
			get
			{
				return this._AbstractStatusChangeHistoryID;
			}
			set
			{
				if ((this._AbstractStatusChangeHistoryID != value))
				{
					this.OnAbstractStatusChangeHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusChangeHistoryID = value;
					this.SendPropertyChanged("AbstractStatusChangeHistoryID");
					this.OnAbstractStatusChangeHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractID", DbType="Int NOT NULL")]
		public int AbstractID
		{
			get
			{
				return this._AbstractID;
			}
			set
			{
				if ((this._AbstractID != value))
				{
					if (this._Abstract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbstractIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractID = value;
					this.SendPropertyChanged("AbstractID");
					this.OnAbstractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationId", DbType="Int")]
		public System.Nullable<int> EvaluationId
		{
			get
			{
				return this._EvaluationId;
			}
			set
			{
				if ((this._EvaluationId != value))
				{
					this.OnEvaluationIdChanging(value);
					this.SendPropertyChanging();
					this._EvaluationId = value;
					this.SendPropertyChanged("EvaluationId");
					this.OnEvaluationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusID", DbType="Int NOT NULL")]
		public int AbstractStatusID
		{
			get
			{
				return this._AbstractStatusID;
			}
			set
			{
				if ((this._AbstractStatusID != value))
				{
					if (this._AbstractStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbstractStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusID = value;
					this.SendPropertyChanged("AbstractStatusID");
					this.OnAbstractStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Abstract_AbstractStatusChangeHistory", Storage="_Abstract", ThisKey="AbstractID", OtherKey="AbstractID", IsForeignKey=true)]
		public Abstract Abstract
		{
			get
			{
				return this._Abstract.Entity;
			}
			set
			{
				Abstract previousValue = this._Abstract.Entity;
				if (((previousValue != value) 
							|| (this._Abstract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Abstract.Entity = null;
						previousValue.AbstractStatusChangeHistories.Remove(this);
					}
					this._Abstract.Entity = value;
					if ((value != null))
					{
						value.AbstractStatusChangeHistories.Add(this);
						this._AbstractID = value.AbstractID;
					}
					else
					{
						this._AbstractID = default(int);
					}
					this.SendPropertyChanged("Abstract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AbstractStatus_AbstractStatusChangeHistory", Storage="_AbstractStatus", ThisKey="AbstractStatusID", OtherKey="AbstractStatusID", IsForeignKey=true)]
		public AbstractStatus AbstractStatus
		{
			get
			{
				return this._AbstractStatus.Entity;
			}
			set
			{
				AbstractStatus previousValue = this._AbstractStatus.Entity;
				if (((previousValue != value) 
							|| (this._AbstractStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AbstractStatus.Entity = null;
						previousValue.AbstractStatusChangeHistories.Remove(this);
					}
					this._AbstractStatus.Entity = value;
					if ((value != null))
					{
						value.AbstractStatusChangeHistories.Add(this);
						this._AbstractStatusID = value.AbstractStatusID;
					}
					else
					{
						this._AbstractStatusID = default(int);
					}
					this.SendPropertyChanged("AbstractStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AbstractStatus")]
	public partial class AbstractStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbstractStatusID;
		
		private string _AbstractStatusCode;
		
		private string _AbstractStatusDescription;
		
		private System.Nullable<int> _StatusID;
		
		private EntitySet<AbstractStatusChangeHistory> _AbstractStatusChangeHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbstractStatusIDChanging(int value);
    partial void OnAbstractStatusIDChanged();
    partial void OnAbstractStatusCodeChanging(string value);
    partial void OnAbstractStatusCodeChanged();
    partial void OnAbstractStatusDescriptionChanging(string value);
    partial void OnAbstractStatusDescriptionChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
		
		public AbstractStatus()
		{
			this._AbstractStatusChangeHistories = new EntitySet<AbstractStatusChangeHistory>(new Action<AbstractStatusChangeHistory>(this.attach_AbstractStatusChangeHistories), new Action<AbstractStatusChangeHistory>(this.detach_AbstractStatusChangeHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbstractStatusID
		{
			get
			{
				return this._AbstractStatusID;
			}
			set
			{
				if ((this._AbstractStatusID != value))
				{
					this.OnAbstractStatusIDChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusID = value;
					this.SendPropertyChanged("AbstractStatusID");
					this.OnAbstractStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string AbstractStatusCode
		{
			get
			{
				return this._AbstractStatusCode;
			}
			set
			{
				if ((this._AbstractStatusCode != value))
				{
					this.OnAbstractStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusCode = value;
					this.SendPropertyChanged("AbstractStatusCode");
					this.OnAbstractStatusCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbstractStatusDescription", DbType="NVarChar(255)")]
		public string AbstractStatusDescription
		{
			get
			{
				return this._AbstractStatusDescription;
			}
			set
			{
				if ((this._AbstractStatusDescription != value))
				{
					this.OnAbstractStatusDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AbstractStatusDescription = value;
					this.SendPropertyChanged("AbstractStatusDescription");
					this.OnAbstractStatusDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AbstractStatus_AbstractStatusChangeHistory", Storage="_AbstractStatusChangeHistories", ThisKey="AbstractStatusID", OtherKey="AbstractStatusID")]
		public EntitySet<AbstractStatusChangeHistory> AbstractStatusChangeHistories
		{
			get
			{
				return this._AbstractStatusChangeHistories;
			}
			set
			{
				this._AbstractStatusChangeHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.AbstractStatus = this;
		}
		
		private void detach_AbstractStatusChangeHistories(AbstractStatusChangeHistory entity)
		{
			this.SendPropertyChanging();
			entity.AbstractStatus = null;
		}
	}
}
#pragma warning restore 1591
